{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mohamed Barrie\\\\Documents\\\\Project\\\\Student-Central\\\\student-central\\\\src\\\\components\\\\quiz-page\\\\StartQuizpage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate, useLocation, Link } from 'react-router-dom';\nimport '../../styles/quiz-page/StartQuizpage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StartQuizPage = props => {\n  _s();\n  const location = useLocation();\n  const {\n    quizName\n  } = useParams();\n  const navigate = useNavigate();\n  const prevLocation = location.state.prevPath;\n  const quizCreator = location.state.creator;\n  console.log(\"prevLocation\", location.state.prevPath);\n  console.log(\"creator\", location.state.creator);\n\n  // Variable and structure for quiz questions\n  const [quizData, setQuizData] = useState({\n    quizName: '',\n    questions: [{\n      term: '',\n      definition: ''\n    }]\n  });\n\n  // Track what type of quiz is being selected\n  const [quizType, setQuizType] = useState(null);\n  useEffect(() => {\n    const fetchQuizDataUser = async () => {\n      try {\n        const response = await fetch(`http://localhost:4000/api/quiz/get-one-quiz/${quizName}`, {\n          method: 'GET',\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch quiz data.');\n        }\n        const data = await response.json();\n        const quizData = {\n          quizName: quizName,\n          questions: data.questions.map(question => ({\n            term: question.term || '',\n            definition: question.definition || ''\n          }))\n        };\n        setQuizData(quizData);\n      } catch (error) {\n        console.log('Error fetching quiz data.', error);\n      }\n    };\n    const fetchQuizDataSearch = async creator => {\n      try {\n        const response = await fetch(`http://localhost:4000/api/quiz/one-quiz-from-all/${quizName}/${creator}`, {\n          method: 'GET',\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch quiz data.');\n        }\n        const data = await response.json();\n        const quizData = {\n          quizName: quizName,\n          questions: data.questions.map(question => ({\n            term: question.term || '',\n            definition: question.definition || ''\n          }))\n        };\n        setQuizData(quizData);\n      } catch (error) {\n        console.log('Error fetching quiz data.', error);\n      }\n    };\n    if (!quizCreator) {\n      fetchQuizDataUser();\n    } else {\n      fetchQuizDataSearch(quizCreator);\n    }\n    // fetchQuizData();\n  }, [quizName]);\n  const handleQuizTypeSelection = quizType => {\n    // Set the quizType when the user selects a quiz type\n    setQuizType(quizType);\n\n    // Navigate to the QuizQuestions.js with url as the quiz type\n    navigate(`/quiz/${quizName}/questions?type=${quizType}`, {\n      state: {\n        prevPath: location.pathname,\n        creator: quizCreator\n      }\n    });\n    // <Link to={`/quiz/${quizName}/questions?type=${quizType}`}\n    //       state={{prevPath: location.pathname, creator: quizCreator}}></Link>\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"startQuiz-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Type\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select Quiz Type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleQuizTypeSelection('multipleChoice'),\n        className: `quiz-type-btn ${quizType === 'multipleChoice' ? 'selected' : ''}`,\n        children: \"Multiple Choice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleQuizTypeSelection('written'),\n        className: `quiz-type-btn ${quizType === 'written' ? 'selected' : ''}`,\n        children: \"Written Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleQuizTypeSelection('both'),\n        className: `quiz-type-btn ${quizType === 'both' ? 'selected' : ''}`,\n        children: \"Both\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n};\n_s(StartQuizPage, \"9ZiuRhf6X1cSwUK9Lr8dK+iNyX4=\", false, function () {\n  return [useLocation, useParams, useNavigate];\n});\n_c = StartQuizPage;\nexport default StartQuizPage;\nvar _c;\n$RefreshReg$(_c, \"StartQuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","useLocation","Link","jsxDEV","_jsxDEV","StartQuizPage","props","_s","location","quizName","navigate","prevLocation","state","prevPath","quizCreator","creator","console","log","quizData","setQuizData","questions","term","definition","quizType","setQuizType","fetchQuizDataUser","response","fetch","method","credentials","ok","Error","data","json","map","question","error","fetchQuizDataSearch","handleQuizTypeSelection","pathname","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Mohamed Barrie/Documents/Project/Student-Central/student-central/src/components/quiz-page/StartQuizpage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate, useLocation, Link } from 'react-router-dom';\r\nimport '../../styles/quiz-page/StartQuizpage.css';\r\n\r\nconst StartQuizPage = (props) => {\r\n    const location = useLocation();\r\n\r\n    const { quizName } = useParams();\r\n    const navigate = useNavigate();\r\n\r\n    const prevLocation = location.state.prevPath;\r\n    const quizCreator = location.state.creator;\r\n\r\n    console.log(\"prevLocation\", location.state.prevPath);\r\n     console.log(\"creator\", location.state.creator);\r\n\r\n    // Variable and structure for quiz questions\r\n    const [quizData, setQuizData] = useState({\r\n        quizName: '',\r\n        questions: [\r\n            {\r\n                term: '',\r\n                definition: '',\r\n            },\r\n        ],\r\n    });\r\n\r\n    // Track what type of quiz is being selected\r\n    const [quizType, setQuizType] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchQuizDataUser = async () => {\r\n            try {\r\n                const response = await fetch(`http://localhost:4000/api/quiz/get-one-quiz/${quizName}`, {\r\n                    method: 'GET',\r\n                    credentials: 'include',\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch quiz data.');\r\n                }\r\n\r\n                const data = await response.json();\r\n                const quizData = {\r\n                    quizName: quizName,\r\n                    questions: data.questions.map((question) => ({\r\n                        term: question.term || '',\r\n                        definition: question.definition || '',\r\n                    })),\r\n                };\r\n                setQuizData(quizData);\r\n            } catch (error) {\r\n                console.log('Error fetching quiz data.', error);\r\n            }\r\n        };\r\n\r\n        const fetchQuizDataSearch = async (creator) => {\r\n            try {\r\n                const response = await fetch(`http://localhost:4000/api/quiz/one-quiz-from-all/${quizName}/${creator}`, {\r\n                    method: 'GET',\r\n                    credentials: 'include',\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch quiz data.');\r\n                }\r\n\r\n                const data = await response.json();\r\n                const quizData = {\r\n                    quizName: quizName,\r\n                    questions: data.questions.map((question) => ({\r\n                        term: question.term || '',\r\n                        definition: question.definition || '',\r\n                    })),\r\n                };\r\n                setQuizData(quizData);\r\n            } catch (error) {\r\n                console.log('Error fetching quiz data.', error);\r\n            }\r\n        };\r\n\r\n        if(!quizCreator){\r\n            fetchQuizDataUser();\r\n        }\r\n        else{\r\n            fetchQuizDataSearch(quizCreator);\r\n        }\r\n        // fetchQuizData();\r\n    }, [quizName]);\r\n\r\n    const handleQuizTypeSelection = (quizType) => {\r\n        // Set the quizType when the user selects a quiz type\r\n        setQuizType(quizType);\r\n\r\n        // Navigate to the QuizQuestions.js with url as the quiz type\r\n        navigate(`/quiz/${quizName}/questions?type=${quizType}`, {\r\n            state:{prevPath: location.pathname, creator: quizCreator}\r\n        });\r\n        // <Link to={`/quiz/${quizName}/questions?type=${quizType}`}\r\n        //       state={{prevPath: location.pathname, creator: quizCreator}}></Link>\r\n    };\r\n\r\n    return (\r\n        <div className=\"startQuiz-container\">\r\n            <div className='Type'>\r\n                <p>Select Quiz Type:</p>\r\n                <button\r\n                    onClick={() => handleQuizTypeSelection('multipleChoice')}\r\n                    className={`quiz-type-btn ${quizType === 'multipleChoice' ? 'selected' : ''}`}\r\n                >\r\n                    Multiple Choice\r\n                </button>\r\n                <button\r\n                    onClick={() => handleQuizTypeSelection('written')}\r\n                    className={`quiz-type-btn ${quizType === 'written' ? 'selected' : ''}`}\r\n                >\r\n                    Written Question\r\n                </button>\r\n                <button\r\n                    onClick={() => handleQuizTypeSelection('both')}\r\n                    className={`quiz-type-btn ${quizType === 'both' ? 'selected' : ''}`}\r\n                >\r\n                    Both\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StartQuizPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}