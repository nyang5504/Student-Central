{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/ninay/Documents/capstone-499/Student-Central/student-central/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/ninay/Documents/capstone-499/Student-Central/student-central/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/ninay/Documents/capstone-499/Student-Central/student-central/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from'react';import{useLocation,useParams}from'react-router-dom';import'../../styles/quiz-page/QuizQuestions.css';// import \"../components/SavedQuizCard\"\n// import QuizSideBar from './QuizSidebar';\nimport MultipleChoice from'./MultipleChoice';import WrittenChoice from'./WrittenChoice';import QuizResults from'./QuizResults';import QuizSideBar from'./QuizSidebar';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var QuizQuestions=function QuizQuestions(){var location=useLocation();var prevLocation=location.state.prevPath;var quizCreator=location.state.creator;console.log(\"prevLocation\",location.state.prevPath);console.log(\"creator\",location.state.creator);//get query param\nvar params=new URLSearchParams(useLocation().search);var quizType=params.get('type');//get quiz name from param\nvar _useParams=useParams(),quizName=_useParams.quizName;var _useState=useState({quizName:'',questions:[{term:'',definition:''}]}),_useState2=_slicedToArray(_useState,2),quizData=_useState2[0],setQuizData=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),currentQuestionCount=_useState4[0],setCurrentQuestionCount=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),quizQuestionsList=_useState6[0],setQuizQuestionsList=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),allUserAns=_useState8[0],setAllUserAns=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),submitted=_useState10[0],setSubmitted=_useState10[1];//helper function that returns a random type, either written or multiple choice\nvar getRandomType=function getRandomType(){//if quiz type was both, then we choose a type randomly\nif(quizType==\"both\"){var randomNum=Math.floor(Math.random()*10)+1;if(randomNum%2==0){return\"multipleChoice\";}else{return\"written\";}}else{//if quiz type was not both, we use that quiz type for the question type\nreturn quizType;}};//helper function to shuffle the order of questions, so that each time user takes quiz, the order is different\nvar createQuestionOrder=function createQuestionOrder(defs){var questionOrder=[];for(var i=0;i<defs.length;i++){questionOrder.push(i);}shuffleArr(questionOrder);return questionOrder;};//shuffles any array you give it\nvar shuffleArr=function shuffleArr(arr){//starting from the last element, choose an random element before it two swap with\nfor(var i=arr.length-1;i>0;i--){var numToSwap=Math.floor(Math.random()*(i+1));var temp=arr[i];arr[i]=arr[numToSwap];arr[numToSwap]=temp;}};//given an answer and a list of all definitions within the quiz, create a 4 element array containing choices for a single question\nvar createMCChoices=function createMCChoices(answer,defs){//create a copy of the list of defintions, excluding the answer\nvar firstIdx=defs.findIndex(function(x){return x===answer;});var defsCopy=defs.filter(function(def,index){return index!=firstIdx;});//empty array to store choices\nvar arrMC=[];//get a random number to decide where the answer will appear within the array of choices\nvar randomNum=Math.floor(Math.random()*4);//loop 4 times to fill up arrMC\nfor(var i=0;i<4;i++){//if this is not the index where the answer will be, randomly select a definition from the list of all definitions and place it in arrMC.\nif(i!=randomNum){var randomDefIdx=Math.floor(Math.random()*defsCopy.length);arrMC.push(defsCopy[randomDefIdx]);//remove chosen definition from the definitions array so it doesn't get chosen again\ndefsCopy.splice(randomDefIdx,1);}else{arrMC.push(answer);}}return arrMC;};var quizSetup=function quizSetup(quizdata,defs){//first get the question ordering\nvar qORder=createQuestionOrder(defs);var entireQuiz=[];for(var i=0;i<qORder.length;i++){var questionInfo={};questionInfo.questionType=getRandomType();questionInfo.term=quizdata.questions[qORder[i]].term;var ans=quizdata.questions[qORder[i]].definition;// console.log(\"questionType\", questionInfo.questionType);\n//the object will only have choices if it is a multiple choice question\nif(questionInfo.questionType===\"multipleChoice\"){questionInfo.choices=createMCChoices(ans,defs);}questionInfo.answer=ans;// console.log(\"questionInfo\", questionInfo);\nentireQuiz.push(questionInfo);// console.log(\"entireQuiz\", entireQuiz);\n}//update useState variable\nsetQuizQuestionsList(entireQuiz);//this is used to track user answers. It starts with no user answer\nvar emptyAns=[];for(var _i=0;_i<entireQuiz.length;_i++){emptyAns.push(\"\");}setAllUserAns(emptyAns);};//useEffect to get quiz data for quiz clicked on earlier\nuseEffect(function(){var fetchQuizData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var response,data,_quizData;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetch(\"http://localhost:4000/api/quiz/get-one-quiz/\".concat(quizName),{method:'GET',credentials:'include'});case 3:response=_context.sent;if(response.ok){_context.next=6;break;}throw new Error('Failed to fetch quiz data.');case 6:_context.next=8;return response.json();case 8:data=_context.sent;_quizData={quizName:quizName,// map out questions from database. Empty string is default\nquestions:data.questions.map(function(question){return{term:question.term||'',definition:question.definition||''};})};// Update the state with the retrieved data\nconsole.log(\"quizData\",_quizData);setQuizData(_quizData);_context.next=17;break;case 14:_context.prev=14;_context.t0=_context[\"catch\"](0);console.log('Error fetching quiz data.',_context.t0);case 17:case\"end\":return _context.stop();}},_callee,null,[[0,14]]);}));return function fetchQuizData(){return _ref.apply(this,arguments);};}();var fetchQuizDataSearch=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(creator){var response,data,_quizData2;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return fetch(\"http://localhost:4000/api/quiz/one-quiz-from-all/\".concat(quizName,\"/\").concat(creator),{method:'GET',credentials:'include'});case 3:response=_context2.sent;if(response.ok){_context2.next=6;break;}throw new Error('Failed to fetch quiz data.');case 6:_context2.next=8;return response.json();case 8:data=_context2.sent;_quizData2={quizName:quizName,questions:data.map(function(question){return{term:question.term||'',definition:question.definition||''};})};setQuizData(_quizData2);_context2.next=16;break;case 13:_context2.prev=13;_context2.t0=_context2[\"catch\"](0);console.log('Error fetching quiz data.',_context2.t0);case 16:case\"end\":return _context2.stop();}},_callee2,null,[[0,13]]);}));return function fetchQuizDataSearch(_x){return _ref2.apply(this,arguments);};}();if(!quizCreator){fetchQuizData();}else{fetchQuizDataSearch(quizCreator);}},[]);//once quiz data is fetched, we can organize that information to prepare for quiz taking\nuseEffect(function(){var alldefinitions=quizData.questions.map(function(question){return question.definition;});console.log(\"alldefinitions\",alldefinitions);quizSetup(quizData,alldefinitions);},[quizData]);//Save user answer and moves to next question\nvar handleNextQuestion=function handleNextQuestion(){setCurrentQuestionCount(function(prevIndex){return prevIndex+1;});};//Save user answer and moves to previous question\nvar handlePreviousQuestion=function handlePreviousQuestion(){setCurrentQuestionCount(function(prevIndex){return prevIndex-1;});};return/*#__PURE__*/_jsx(\"div\",{className:\"QuizQuestions-container\",children:quizQuestionsList.length===0?/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"}):submitted?/*#__PURE__*/_jsx(QuizResults,{allUserAns:allUserAns,quizQuestionsList:quizQuestionsList}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(QuizSideBar,{allUserAns:allUserAns,setCurrentQuestionCount:setCurrentQuestionCount,currentQuestionCount:currentQuestionCount}),quizQuestionsList[currentQuestionCount].questionType==='multipleChoice'?/*#__PURE__*/_jsx(MultipleChoice,{question:quizQuestionsList[currentQuestionCount],setAllUserAns:setAllUserAns,allUserAns:allUserAns,currentQuestionIndex:currentQuestionCount,handleNextQuestion:handleNextQuestion,handlePreviousQuestion:handlePreviousQuestion,setSubmitted:setSubmitted,quizQuestionsList:quizQuestionsList,currentQuestionCount:currentQuestionCount}):/*#__PURE__*/_jsx(WrittenChoice,{question:quizQuestionsList[currentQuestionCount],currentQuestionIndex:currentQuestionCount,setAllUserAns:setAllUserAns,allUserAns:allUserAns,userAnswer:allUserAns[currentQuestionCount]||'',setCurrentQuestionCount:setCurrentQuestionCount,handleNextQuestion:handleNextQuestion,handlePreviousQuestion:handlePreviousQuestion,setSubmitted:setSubmitted,quizQuestionsList:quizQuestionsList,currentQuestionCount:currentQuestionCount})]})});};export default QuizQuestions;","map":{"version":3,"names":["React","useState","useEffect","useLocation","useParams","MultipleChoice","WrittenChoice","QuizResults","QuizSideBar","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","QuizQuestions","location","prevLocation","state","prevPath","quizCreator","creator","console","log","params","URLSearchParams","search","quizType","get","_useParams","quizName","_useState","questions","term","definition","_useState2","_slicedToArray","quizData","setQuizData","_useState3","_useState4","currentQuestionCount","setCurrentQuestionCount","_useState5","_useState6","quizQuestionsList","setQuizQuestionsList","_useState7","_useState8","allUserAns","setAllUserAns","_useState9","_useState10","submitted","setSubmitted","getRandomType","randomNum","Math","floor","random","createQuestionOrder","defs","questionOrder","i","length","push","shuffleArr","arr","numToSwap","temp","createMCChoices","answer","firstIdx","findIndex","x","defsCopy","filter","def","index","arrMC","randomDefIdx","splice","quizSetup","quizdata","qORder","entireQuiz","questionInfo","questionType","ans","choices","emptyAns","fetchQuizData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","data","_quizData","wrap","_callee$","_context","prev","next","fetch","concat","method","credentials","sent","ok","Error","json","map","question","t0","stop","apply","arguments","fetchQuizDataSearch","_ref2","_callee2","_quizData2","_callee2$","_context2","_x","alldefinitions","handleNextQuestion","prevIndex","handlePreviousQuestion","className","children","currentQuestionIndex","userAnswer"],"sources":["C:/Users/ninay/Documents/capstone-499/Student-Central/student-central/src/components/quiz-page/QuizQuestions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport '../../styles/quiz-page/QuizQuestions.css';\r\n// import \"../components/SavedQuizCard\"\r\n// import QuizSideBar from './QuizSidebar';\r\nimport MultipleChoice from './MultipleChoice'\r\nimport WrittenChoice from './WrittenChoice'\r\nimport QuizResults from './QuizResults'\r\nimport QuizSideBar from './QuizSidebar';\r\n\r\nconst QuizQuestions = () => {\r\n  const location = useLocation();\r\n  const prevLocation = location.state.prevPath;\r\n  const quizCreator = location.state.creator;\r\n  console.log(\"prevLocation\", location.state.prevPath);\r\n  console.log(\"creator\", location.state.creator);\r\n\r\n  //get query param\r\n  const params = new URLSearchParams(useLocation().search);\r\n  const quizType = params.get('type');\r\n  //get quiz name from param\r\n  const { quizName } = useParams();\r\n\r\n  const [quizData, setQuizData] = useState({\r\n    quizName: '',\r\n    questions: [\r\n      {\r\n        term: '',\r\n        definition: '',\r\n      },\r\n    ],\r\n  });\r\n  const [currentQuestionCount, setCurrentQuestionCount] = useState(0);\r\n  const [quizQuestionsList, setQuizQuestionsList] = useState([]);\r\n  const [allUserAns, setAllUserAns] = useState([]);\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  //helper function that returns a random type, either written or multiple choice\r\n  const getRandomType = () => {\r\n    //if quiz type was both, then we choose a type randomly\r\n    if (quizType == \"both\") {\r\n      let randomNum = Math.floor(Math.random() * 10) + 1;\r\n      if (randomNum % 2 == 0) { return \"multipleChoice\" }\r\n      else { return \"written\" }\r\n    }\r\n    else {\r\n      //if quiz type was not both, we use that quiz type for the question type\r\n      return quizType;\r\n    }\r\n  }\r\n\r\n  //helper function to shuffle the order of questions, so that each time user takes quiz, the order is different\r\n  const createQuestionOrder = (defs) => {\r\n    const questionOrder = [];\r\n    for (let i = 0; i < defs.length; i++) {\r\n      questionOrder.push(i);\r\n    }\r\n    shuffleArr(questionOrder);\r\n    return questionOrder;\r\n  }\r\n\r\n  //shuffles any array you give it\r\n  const shuffleArr = (arr) => {\r\n    //starting from the last element, choose an random element before it two swap with\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n      let numToSwap = Math.floor(Math.random() * (i + 1));\r\n      let temp = arr[i];\r\n      arr[i] = arr[numToSwap];\r\n      arr[numToSwap] = temp;\r\n    }\r\n  }\r\n\r\n  //given an answer and a list of all definitions within the quiz, create a 4 element array containing choices for a single question\r\n  const createMCChoices = (answer, defs) => {\r\n    //create a copy of the list of defintions, excluding the answer\r\n    const firstIdx = defs.findIndex(x => x === answer);\r\n    const defsCopy = defs.filter((def, index) => index != firstIdx);\r\n    //empty array to store choices\r\n    const arrMC = [];\r\n    //get a random number to decide where the answer will appear within the array of choices\r\n    let randomNum = Math.floor(Math.random() * 4);\r\n    //loop 4 times to fill up arrMC\r\n    for (let i = 0; i < 4; i++) {\r\n      //if this is not the index where the answer will be, randomly select a definition from the list of all definitions and place it in arrMC.\r\n      if (i != randomNum) {\r\n        let randomDefIdx = Math.floor(Math.random() * defsCopy.length);\r\n        arrMC.push(defsCopy[randomDefIdx]);\r\n        //remove chosen definition from the definitions array so it doesn't get chosen again\r\n        defsCopy.splice(randomDefIdx, 1);\r\n      }\r\n      else {\r\n        arrMC.push(answer);\r\n      }\r\n    }\r\n    return arrMC;\r\n  }\r\n\r\n  const quizSetup = (quizdata, defs) => {\r\n    //first get the question ordering\r\n    const qORder = createQuestionOrder(defs);\r\n    const entireQuiz = [];\r\n    for (let i = 0; i < qORder.length; i++) {\r\n      const questionInfo = {};\r\n      questionInfo.questionType = getRandomType();\r\n      questionInfo.term = quizdata.questions[qORder[i]].term;\r\n      const ans = quizdata.questions[qORder[i]].definition;\r\n      // console.log(\"questionType\", questionInfo.questionType);\r\n\r\n      //the object will only have choices if it is a multiple choice question\r\n      if (questionInfo.questionType === \"multipleChoice\") {\r\n        questionInfo.choices = createMCChoices(ans, defs);\r\n      }\r\n      questionInfo.answer = ans;\r\n\r\n      // console.log(\"questionInfo\", questionInfo);\r\n      entireQuiz.push(questionInfo);\r\n      // console.log(\"entireQuiz\", entireQuiz);\r\n\r\n    }\r\n    //update useState variable\r\n    setQuizQuestionsList(entireQuiz);\r\n\r\n    //this is used to track user answers. It starts with no user answer\r\n    const emptyAns = [];\r\n    for (let i = 0; i < entireQuiz.length; i++) {\r\n      emptyAns.push(\"\");\r\n    }\r\n    setAllUserAns(emptyAns);\r\n  }\r\n\r\n  //useEffect to get quiz data for quiz clicked on earlier\r\n  useEffect(() => {\r\n    const fetchQuizData = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:4000/api/quiz/get-one-quiz/${quizName}`, {\r\n          method: 'GET',\r\n          credentials: 'include',\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch quiz data.');\r\n        }\r\n        const data = await response.json();\r\n        const quizData = {\r\n          quizName: quizName,\r\n          // map out questions from database. Empty string is default\r\n          questions: data.questions.map((question) => ({\r\n            term: question.term || '',\r\n            definition: question.definition || '',\r\n          })),\r\n        };\r\n        // Update the state with the retrieved data\r\n        console.log(\"quizData\", quizData);\r\n\r\n        setQuizData(quizData);\r\n      } catch (error) {\r\n        console.log('Error fetching quiz data.', error);\r\n      }\r\n    };\r\n\r\n    const fetchQuizDataSearch = async (creator) => {\r\n      try {\r\n        const response = await fetch(`http://localhost:4000/api/quiz/one-quiz-from-all/${quizName}/${creator}`, {\r\n          method: 'GET',\r\n          credentials: 'include',\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch quiz data.');\r\n        }\r\n\r\n        const data = await response.json();\r\n        const quizData = {\r\n          quizName: quizName,\r\n          questions: data.map((question) => ({\r\n            term: question.term || '',\r\n            definition: question.definition || '',\r\n          })),\r\n        };\r\n        setQuizData(quizData);\r\n      } catch (error) {\r\n        console.log('Error fetching quiz data.', error);\r\n      }\r\n    };\r\n\r\n    if (!quizCreator) {\r\n      fetchQuizData();\r\n    }\r\n    else {\r\n      fetchQuizDataSearch(quizCreator);\r\n    }\r\n  }, [])\r\n\r\n  //once quiz data is fetched, we can organize that information to prepare for quiz taking\r\n  useEffect(() => {\r\n    const alldefinitions = quizData.questions.map((question) => question.definition);\r\n    console.log(\"alldefinitions\", alldefinitions);\r\n    quizSetup(quizData, alldefinitions);\r\n  }, [quizData])\r\n\r\n  //Save user answer and moves to next question\r\n  const handleNextQuestion = () => {\r\n    setCurrentQuestionCount((prevIndex) => prevIndex + 1);\r\n  };\r\n\r\n  //Save user answer and moves to previous question\r\n  const handlePreviousQuestion = () => {\r\n    setCurrentQuestionCount((prevIndex) => prevIndex - 1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"QuizQuestions-container\">\r\n      \r\n      {/* Buffer for our state variables to get their values before using them. Without this, we would have an error */}\r\n      {quizQuestionsList.length === 0 ? (\r\n        <div>Loading...</div>\r\n      ) : submitted ? (<QuizResults allUserAns={allUserAns} quizQuestionsList={quizQuestionsList} />) :\r\n        (\r\n          <>\r\n            <QuizSideBar allUserAns={allUserAns} setCurrentQuestionCount={setCurrentQuestionCount} currentQuestionCount={currentQuestionCount} />\r\n            {quizQuestionsList[currentQuestionCount].questionType === 'multipleChoice' ? (\r\n              <MultipleChoice\r\n                question={quizQuestionsList[currentQuestionCount]}\r\n                setAllUserAns={setAllUserAns}\r\n                allUserAns={allUserAns}\r\n                currentQuestionIndex={currentQuestionCount}\r\n                handleNextQuestion = {handleNextQuestion}\r\n                handlePreviousQuestion = {handlePreviousQuestion}\r\n                setSubmitted = {setSubmitted}\r\n                quizQuestionsList = {quizQuestionsList}\r\n                currentQuestionCount = {currentQuestionCount}\r\n              />\r\n            ) : (\r\n              <WrittenChoice\r\n                question={quizQuestionsList[currentQuestionCount]}\r\n                currentQuestionIndex={currentQuestionCount}\r\n                setAllUserAns={setAllUserAns}\r\n                allUserAns={allUserAns}\r\n                userAnswer={allUserAns[currentQuestionCount] || ''}\r\n                setCurrentQuestionCount={setCurrentQuestionCount}\r\n                handleNextQuestion = {handleNextQuestion}\r\n                handlePreviousQuestion = {handlePreviousQuestion}\r\n                setSubmitted = {setSubmitted}\r\n                quizQuestionsList = {quizQuestionsList}\r\n                currentQuestionCount = {currentQuestionCount}\r\n              />\r\n            )}\r\n          </>\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizQuestions;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}