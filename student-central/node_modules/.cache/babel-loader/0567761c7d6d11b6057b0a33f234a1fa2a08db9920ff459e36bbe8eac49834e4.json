{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ninay\\\\Documents\\\\capstone-499\\\\Student-Central\\\\student-central\\\\src\\\\components\\\\TodoPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Sidebar from './Sidebar';\nimport NoteSection from './NoteSection';\nimport NoteList from './NoteList';\nimport '../styles/TodoPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoPage = () => {\n  _s();\n  const [selectedFolder, setSelectedFolder] = useState(null);\n  const [selectedNote, setSelectedNote] = useState(null);\n  const [folderNotes, setFolderNotes] = useState({});\n  const [mounted, setMounted] = useState(false);\n  console.log(folderNotes);\n  // Function to create new folder, uses spread operator to create copy\n  const handleAddFolder = folderName => {\n    setFolderNotes(prevNotes => ({\n      ...prevNotes,\n      // creates empty array\n      [folderName]: []\n    }));\n  };\n\n  // Function to add note object to folder\n  const handleAddNoteToFolder = (folderName, note) => {\n    // Spread operator to create copy\n    setFolderNotes(prevNotes => ({\n      ...prevNotes,\n      // Combine previous notes array with new notes object \n      [folderName]: [...(prevNotes[folderName] || []), note]\n    }));\n  };\n\n  // Function to delete a note\n  const deleteNote = (folderName, noteToDelete) => {\n    setFolderNotes(prevNotes => ({\n      ...prevNotes,\n      // Find the note in the folder using filter\n      [folderName]: prevNotes[folderName].filter(note => note !== noteToDelete)\n    }));\n  };\n\n  // Function to delete a folder and it's notes\n  const deleteFolder = folderName => {\n    // Remove the folder and its notes\n    setFolderNotes(prevNotes => {\n      const updatedNotes = {\n        ...prevNotes\n      };\n      delete updatedNotes[folderName];\n      setSelectedNote(null);\n      //Render the new folders in the Sidebar\n      return updatedNotes;\n    });\n\n    // Reset the selected folder and note if they were deleted\n    if (selectedFolder === folderName) {\n      setSelectedFolder(null);\n      setSelectedNote(null);\n    }\n  };\n  useEffect(() => {\n    const saveFolders = () => {\n      try {\n        console.log(\"SAVETODATABASE\", JSON.stringify(folderNotes));\n        fetch('http://localhost:4000/api/schedule/save-folders', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(folderNotes),\n          credentials: 'include'\n        });\n      } catch (error) {\n        console.log(\"error saveFolders\", error);\n      }\n    };\n    if (mounted) {\n      saveFolders();\n    }\n    //if mounting for the first time, dont save\n    else {\n      setMounted(true);\n    }\n  }, [folderNotes]);\n  useEffect(() => {\n    const getFolders = () => {\n      try {\n        return fetch('http://localhost:4000/api/schedule/my-folders', {\n          method: 'GET',\n          credentials: 'include'\n        }).then(res => res.json()).then(data => setFolderNotes(data));\n      } catch (error) {\n        console.log(\"error getFolders\", error);\n      }\n    };\n    getFolders();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo-page\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar\n    //Pass down props from Sidebar.js\n    , {\n      setSelectedFolder: setSelectedFolder,\n      folders: Object.keys(folderNotes),\n      onAddFolder: handleAddFolder,\n      onDeleteFolder: deleteFolder,\n      setSelectedNote: setFolderNotes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NoteList\n    // Pass down props to NotesList.js\n    , {\n      selectedFolder: selectedFolder,\n      folderNotes: folderNotes,\n      selectedNote: selectedNote,\n      setSelectedNote: setSelectedNote,\n      onAddNoteToFolder: handleAddNoteToFolder,\n      setFolderNotes: setFolderNotes,\n      onDeleteNote: deleteNote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NoteSection\n    // Pass down props from NoteSection.js\n    , {\n      selectedFolder: selectedFolder,\n      selectedNote: selectedNote,\n      folderNotes: folderNotes,\n      setSelectedNote: setSelectedNote,\n      setFolderNotes: setFolderNotes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoPage, \"UR4xYFN/9J+QGUXA17iFLDUnOTo=\");\n_c = TodoPage;\nexport default TodoPage;\nvar _c;\n$RefreshReg$(_c, \"TodoPage\");","map":{"version":3,"names":["React","useState","useEffect","Sidebar","NoteSection","NoteList","jsxDEV","_jsxDEV","TodoPage","_s","selectedFolder","setSelectedFolder","selectedNote","setSelectedNote","folderNotes","setFolderNotes","mounted","setMounted","console","log","handleAddFolder","folderName","prevNotes","handleAddNoteToFolder","note","deleteNote","noteToDelete","filter","deleteFolder","updatedNotes","saveFolders","JSON","stringify","fetch","method","headers","body","credentials","error","getFolders","then","res","json","data","className","children","folders","Object","keys","onAddFolder","onDeleteFolder","fileName","_jsxFileName","lineNumber","columnNumber","onAddNoteToFolder","onDeleteNote","_c","$RefreshReg$"],"sources":["C:/Users/ninay/Documents/capstone-499/Student-Central/student-central/src/components/TodoPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Sidebar from './Sidebar';\r\nimport NoteSection from './NoteSection';\r\nimport NoteList from './NoteList';\r\nimport '../styles/TodoPage.css';\r\n\r\nconst TodoPage = () => {\r\n  const [selectedFolder, setSelectedFolder] = useState(null);\r\n  const [selectedNote, setSelectedNote] = useState(null);\r\n  const [folderNotes, setFolderNotes] = useState({});\r\n\r\n  const [mounted, setMounted] = useState(false);\r\n  console.log(folderNotes);\r\n  // Function to create new folder, uses spread operator to create copy\r\n  const handleAddFolder = (folderName) => {\r\n    setFolderNotes((prevNotes) => ({\r\n      ...prevNotes,\r\n      // creates empty array\r\n      [folderName]: [],\r\n    }));\r\n  };\r\n\r\n  // Function to add note object to folder\r\n  const handleAddNoteToFolder = (folderName, note) => {\r\n    // Spread operator to create copy\r\n    setFolderNotes((prevNotes) => ({\r\n      ...prevNotes,\r\n      // Combine previous notes array with new notes object \r\n      [folderName]: [...(prevNotes[folderName] || []), note],\r\n    }));\r\n  };\r\n\r\n  // Function to delete a note\r\n  const deleteNote = (folderName, noteToDelete) => {\r\n    setFolderNotes((prevNotes) => ({\r\n      ...prevNotes,\r\n      // Find the note in the folder using filter\r\n      [folderName]: prevNotes[folderName].filter((note) => note !== noteToDelete),\r\n    }));\r\n  };\r\n\r\n  // Function to delete a folder and it's notes\r\nconst deleteFolder = (folderName) => {\r\n  // Remove the folder and its notes\r\n  setFolderNotes((prevNotes) => {\r\n    const updatedNotes = { ...prevNotes };\r\n    delete updatedNotes[folderName];\r\n    setSelectedNote(null);\r\n    //Render the new folders in the Sidebar\r\n    return updatedNotes;\r\n  });\r\n\r\n  // Reset the selected folder and note if they were deleted\r\n  if (selectedFolder === folderName) {\r\n    setSelectedFolder(null);\r\n    setSelectedNote(null);\r\n  }\r\n};\r\n\r\nuseEffect(() => {\r\n  const saveFolders = () => {\r\n    try{\r\n      console.log(\"SAVETODATABASE\", JSON.stringify(folderNotes));\r\n          fetch('http://localhost:4000/api/schedule/save-folders', {\r\n          method:'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(folderNotes),\r\n          credentials: 'include'\r\n      })\r\n    } catch (error) {\r\n        console.log(\"error saveFolders\", error);\r\n    }\r\n\r\n  }\r\n  if(mounted){\r\n    saveFolders();\r\n  }\r\n  //if mounting for the first time, dont save\r\n  else{\r\n    setMounted(true);\r\n  }\r\n  \r\n}, [folderNotes])\r\n\r\nuseEffect(() => {\r\n  const getFolders = () => {\r\n    try{\r\n      return fetch('http://localhost:4000/api/schedule/my-folders', {\r\n          method:'GET',\r\n          credentials: 'include'\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => setFolderNotes(data));\r\n    } catch (error) {\r\n        console.log(\"error getFolders\", error);\r\n    }\r\n  }\r\n\r\n  getFolders();\r\n}, [])\r\n\r\n  return (\r\n    <div className=\"todo-page\">\r\n      <Sidebar\r\n        //Pass down props from Sidebar.js\r\n        setSelectedFolder={setSelectedFolder}\r\n        folders={Object.keys(folderNotes)}\r\n        onAddFolder={handleAddFolder}\r\n        onDeleteFolder={deleteFolder}\r\n        setSelectedNote={setFolderNotes}\r\n      />\r\n      <NoteList\r\n        // Pass down props to NotesList.js\r\n        selectedFolder={selectedFolder}\r\n        folderNotes={folderNotes}\r\n        selectedNote={selectedNote}\r\n        setSelectedNote={setSelectedNote}\r\n        onAddNoteToFolder={handleAddNoteToFolder}\r\n        setFolderNotes={setFolderNotes}\r\n        onDeleteNote={deleteNote}\r\n      />\r\n      <NoteSection\r\n        // Pass down props from NoteSection.js\r\n        selectedFolder={selectedFolder}\r\n        selectedNote={selectedNote}\r\n        folderNotes={folderNotes}\r\n        setSelectedNote={setSelectedNote}\r\n        setFolderNotes={setFolderNotes}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}