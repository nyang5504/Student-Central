{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ninay\\\\Documents\\\\capstone-499\\\\Student-Central\\\\student-central\\\\src\\\\components\\\\quiz-page\\\\QuizQuestions.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../../styles/quiz-page/QuizQuestions.css';\nimport \"../components/SavedQuizCard\";\n// import QuizSideBar from './QuizSidebar';\nimport MultipleChoice from './MultipleChoice';\nimport WrittenChoice from './WrittenChoice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst params = new URLSearchParams(location.search);\nconst {\n  quizName\n} = useParams();\nconst quizType = params.get('quizType');\nconst [questionType, setQuestionType] = useState(quizType == \"multipleChoice\" || quizType == \"written\" ? quizType : randomType);\nconst [quizData, setQuizData] = useState({\n  quizName: '',\n  questions: [{\n    term: '',\n    definition: ''\n  }]\n});\nconst alldefinitions = quizData.questions.map((term, def) => def);\nconsole.log(\"Def\", alldefinitions);\nconst randomType = () => {\n  let randomNum = Math.random() * 10 + 1;\n  if (randomNum % 2 == 0) {\n    return \"multipleChoice\";\n  } else {\n    return \"written\";\n  }\n};\nuseEffect(() => {\n  const fetchQuizData = async () => {\n    try {\n      const response = await fetch(`http://localhost:4000/api/quiz/get-one-quiz/${quizName}`, {\n        method: 'GET',\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch quiz data.');\n      }\n      const data = await response.json();\n      const quizData = {\n        quizName: quizName,\n        // map out questions from database. Empty string is default\n        questions: data.map(question => ({\n          term: question.term || '',\n          definition: question.definition || ''\n        }))\n      };\n      // Update the state with the retrieved data\n      console.log(\"quizData\", quizData);\n      setQuizData(quizData);\n    } catch (error) {\n      console.log('Error fetching quiz data.', error);\n    }\n  };\n  fetchQuizData();\n  const initialQuestionType = () => {\n    if (quizType == \"multipleChoice\") {}\n  };\n});\nuseEffect(() => {}, [questionType]);\nconst QuizQuestions = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"QuizQuestions-container\",\n    children: questionType == \"multipleChoice\" ? /*#__PURE__*/_jsxDEV(MultipleChoice, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 49\n    }, this) : /*#__PURE__*/_jsxDEV(WrittenChoice, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 69\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_c = QuizQuestions;\nexport default QuizQuestions;\nvar _c;\n$RefreshReg$(_c, \"QuizQuestions\");","map":{"version":3,"names":["React","useState","useEffect","useParams","MultipleChoice","WrittenChoice","jsxDEV","_jsxDEV","params","URLSearchParams","location","search","quizName","quizType","get","questionType","setQuestionType","randomType","quizData","setQuizData","questions","term","definition","alldefinitions","map","def","console","log","randomNum","Math","random","fetchQuizData","response","fetch","method","credentials","ok","Error","data","json","question","error","initialQuestionType","QuizQuestions","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ninay/Documents/capstone-499/Student-Central/student-central/src/components/quiz-page/QuizQuestions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport '../../styles/quiz-page/QuizQuestions.css';\r\nimport \"../components/SavedQuizCard\"\r\n// import QuizSideBar from './QuizSidebar';\r\nimport MultipleChoice from './MultipleChoice'\r\nimport WrittenChoice from './WrittenChoice'\r\n\r\nconst params = new URLSearchParams(location.search);\r\nconst { quizName } = useParams();\r\nconst quizType = params.get('quizType');\r\nconst [questionType, setQuestionType] = useState(quizType==\"multipleChoice\" || quizType==\"written\" ? quizType : randomType);\r\nconst [quizData, setQuizData] = useState({\r\n    quizName: '',\r\n    questions: [\r\n        {\r\n            term: '',\r\n            definition: '',\r\n        },\r\n    ],\r\n});\r\n\r\nconst alldefinitions = quizData.questions.map((term,def) => def);\r\nconsole.log(\"Def\", alldefinitions);\r\n\r\nconst randomType = () => {\r\n    let randomNum = Math.random() * 10 + 1;\r\n    if(randomNum % 2 == 0){\r\n        return \"multipleChoice\"\r\n    }\r\n    else{\r\n        return \"written\"\r\n    }\r\n}\r\n\r\n\r\nuseEffect(() => {\r\n    const fetchQuizData = async () => {\r\n        try {\r\n            const response = await fetch(`http://localhost:4000/api/quiz/get-one-quiz/${quizName}`, {\r\n                method: 'GET',\r\n                credentials: 'include',\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to fetch quiz data.');\r\n            }\r\n            const data = await response.json();\r\n            const quizData = {\r\n                quizName: quizName, \r\n                // map out questions from database. Empty string is default\r\n                questions: data.map((question) => ({\r\n                    term: question.term || '', \r\n                    definition: question.definition || '',\r\n                })),\r\n            };\r\n            // Update the state with the retrieved data\r\n            console.log(\"quizData\",quizData);\r\n            setQuizData(quizData);\r\n        } catch (error) {\r\n            console.log('Error fetching quiz data.', error);\r\n        }\r\n    };\r\n    fetchQuizData();\r\n\r\n    const initialQuestionType = () => {\r\n        if(quizType == \"multipleChoice\"){\r\n\r\n        }\r\n    }\r\n})\r\n\r\nuseEffect(() => {\r\n\r\n}, [questionType])\r\n\r\nconst QuizQuestions = () => {\r\n    return (\r\n        <div className=\"QuizQuestions-container\">\r\n            {/* <QuizSideBar/> */}\r\n            {questionType == \"multipleChoice\" ? <MultipleChoice/> : <WrittenChoice/> }\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuizQuestions;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}