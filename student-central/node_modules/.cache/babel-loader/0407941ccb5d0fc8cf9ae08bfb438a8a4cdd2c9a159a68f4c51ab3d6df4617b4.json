{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ninay\\\\Documents\\\\capstone-499\\\\Student-Central\\\\student-central\\\\src\\\\components\\\\quiz-page\\\\CustomQuizpage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../../styles/quiz-page/CustomQuizpage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizForm = () => {\n  _s();\n  const [quizName, setQuizName] = useState('');\n  const [questions, setQuestions] = useState([{\n    term: '',\n    definition: ''\n  }]);\n  const [allQuizzes, setAllQuizzes] = useState({});\n  const [mounted, setMounted] = useState(false);\n\n  // Updates the state when changes are made in the form\n  const handleQuestionChange = (index, field, value) => {\n    const updatedQuestions = [...questions];\n    // Updates the index in the array and the field(term/def).\n    updatedQuestions[index][field] = value;\n    setQuestions(updatedQuestions);\n  };\n\n  // Adds new term and definition\n  const handleAddQuestion = () => {\n    setQuestions([...questions, {\n      term: '',\n      definition: ''\n    }]);\n  };\n\n  // Changes index, removes question from array , and updates state\n  const handleRemoveQuestion = index => {\n    const updatedQuestions = [...questions];\n    updatedQuestions.splice(index, 1);\n    setQuestions(updatedQuestions);\n  };\n\n  // Save the Quiz in an array of arrays\n  const handleSaveQuiz = () => {\n    // Checks if the terms/def has values\n    if (quizName.trim() === '' || questions.some(q => !q.term || !q.definition)) {\n      alert('Please provide a quiz name and fill in all terms and definitions.');\n      return;\n    }\n    const copyAllQuizzes = {\n      ...allQuizzes\n    };\n    copyAllQuizzes[quizName] = questions;\n    setAllQuizzes(copyAllQuizzes);\n    // Resets the form\n    setQuizName('');\n    setQuestions([{\n      term: '',\n      definition: ''\n    }]);\n    window.location.href = '/quiz';\n  };\n\n  // Saves quiz in database\n  useEffect(() => {\n    const saveQuiz = () => {\n      try {\n        fetch('http://localhost:4000/api/quiz/save-quiz', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(allQuizzes),\n          credentials: 'include'\n        });\n      } catch (error) {\n        console.log(\"error saveQuiz\", error);\n      }\n    };\n    if (mounted) {\n      saveQuiz();\n    }\n    //if mounting for the first time, dont save\n    else {\n      setMounted(true);\n    }\n  }, [allQuizzes]);\n\n  // Retrieves quizzes from database\n  useEffect(() => {\n    const getQuizzes = async () => {\n      try {\n        const response = await fetch('http://localhost:4000/api/quiz/my-quizzes', {\n          method: 'GET',\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch quizzes.');\n        }\n        const data = await response.json();\n        setAllQuizzes(data);\n      } catch (error) {\n        console.log('Error getting quizzes:', error);\n      }\n    };\n    getQuizzes();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"customQuizpage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"createQuizTitle\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create Custom Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Quiz Name: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"create-quizName\",\n        type: \"text\",\n        value: quizName,\n        onChange: e => setQuizName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this), questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Term:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: question.term,\n        onChange: e => handleQuestionChange(index, 'term', e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Definition:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: question.definition,\n        onChange: e => handleQuestionChange(index, 'definition', e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this), questions.length > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => handleRemoveQuestion(index),\n        children: \"Remove Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 15\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleAddQuestion,\n        children: \"Add Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleSaveQuiz,\n        children: \"Save Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 7\n  }, this);\n};\n_s(QuizForm, \"bKbH1WFiZJF5BbO1usTp0TOtaXs=\");\n_c = QuizForm;\nexport default QuizForm;\nvar _c;\n$RefreshReg$(_c, \"QuizForm\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","QuizForm","_s","quizName","setQuizName","questions","setQuestions","term","definition","allQuizzes","setAllQuizzes","mounted","setMounted","handleQuestionChange","index","field","value","updatedQuestions","handleAddQuestion","handleRemoveQuestion","splice","handleSaveQuiz","trim","some","q","alert","copyAllQuizzes","window","location","href","saveQuiz","fetch","method","headers","body","JSON","stringify","credentials","error","console","log","getQuizzes","response","ok","Error","data","json","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","map","question","length","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ninay/Documents/capstone-499/Student-Central/student-central/src/components/quiz-page/CustomQuizpage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../../styles/quiz-page/CustomQuizpage.css';\r\n\r\nconst QuizForm = () => {\r\n    const [quizName, setQuizName] = useState('');\r\n    const [questions, setQuestions] = useState([{ term: '', definition: '' }]);\r\n    const [allQuizzes, setAllQuizzes] = useState({});\r\n\r\n    const [mounted, setMounted] = useState(false);\r\n  \r\n    // Updates the state when changes are made in the form\r\n    const handleQuestionChange = (index, field, value) => {\r\n      const updatedQuestions = [...questions];\r\n      // Updates the index in the array and the field(term/def).\r\n      updatedQuestions[index][field] = value;\r\n      setQuestions(updatedQuestions);\r\n    };\r\n  \r\n    // Adds new term and definition\r\n    const handleAddQuestion = () => {\r\n      setQuestions([...questions, { term: '', definition: '' }]);\r\n    };\r\n  \r\n    // Changes index, removes question from array , and updates state\r\n    const handleRemoveQuestion = (index) => {\r\n      const updatedQuestions = [...questions];\r\n      updatedQuestions.splice(index, 1);\r\n      setQuestions(updatedQuestions);\r\n    };\r\n  \r\n    // Save the Quiz in an array of arrays\r\n    const handleSaveQuiz = () => {\r\n      // Checks if the terms/def has values\r\n      if (quizName.trim() === '' || questions.some((q) => !q.term || !q.definition)) {\r\n        alert('Please provide a quiz name and fill in all terms and definitions.');\r\n        return;\r\n      }\r\n      const copyAllQuizzes = {...allQuizzes};\r\n      copyAllQuizzes[quizName] = questions;\r\n      setAllQuizzes(copyAllQuizzes);\r\n      // Resets the form\r\n      setQuizName('');\r\n      setQuestions([{ term: '', definition: '' }]);\r\n      window.location.href = '/quiz'\r\n    };\r\n\r\n    // Saves quiz in database\r\n    useEffect(() => {\r\n      const saveQuiz = () => {\r\n        try{\r\n            fetch('http://localhost:4000/api/quiz/save-quiz', {\r\n            method:'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(allQuizzes),\r\n            credentials: 'include'\r\n            })\r\n        } catch (error) {\r\n            console.log(\"error saveQuiz\", error);\r\n        }\r\n      }\r\n      if(mounted){\r\n        saveQuiz();\r\n      }\r\n      //if mounting for the first time, dont save\r\n      else{\r\n        setMounted(true);\r\n      }    \r\n    }, [allQuizzes])\r\n\r\n    // Retrieves quizzes from database\r\n    useEffect(() => {\r\n      const getQuizzes = async () => {\r\n        try {\r\n          const response = await fetch('http://localhost:4000/api/quiz/my-quizzes', {\r\n            method: 'GET',\r\n            credentials: 'include'\r\n          });\r\n          if (!response.ok) {\r\n            throw new Error('Failed to fetch quizzes.');\r\n          }\r\n          const data = await response.json();\r\n          setAllQuizzes(data);\r\n        } catch (error) {\r\n          console.log('Error getting quizzes:', error);\r\n        }\r\n      }; \r\n      getQuizzes();\r\n    }, []);\r\n\r\n    return (\r\n      <div className=\"customQuizpage\">\r\n        <div className=\"createQuizTitle\">\r\n          <h2>Create Custom Quiz</h2>\r\n        </div>\r\n        {/*Quiz Name form*/}\r\n        <div className=\"question-container\">\r\n          <label>Quiz Name: </label>\r\n          <input\r\n            className=\"create-quizName\"\r\n            type=\"text\"\r\n            value={quizName}\r\n            onChange={(e) => setQuizName(e.target.value)}\r\n          />\r\n        </div>\r\n        {/*Form and inputs for the question. Maps them out */}\r\n        {questions.map((question, index) => (\r\n          <div key={index} className=\"question-container\">\r\n            <label>Term:</label>\r\n            <input\r\n              type=\"text\"\r\n              value={question.term}\r\n              onChange={(e) => handleQuestionChange(index, 'term', e.target.value)}\r\n            />\r\n            <label>Definition:</label>\r\n            <textarea\r\n              value={question.definition}\r\n              onChange={(e) => handleQuestionChange(index, 'definition', e.target.value)}\r\n            />\r\n            {/*If the number of questions is greater than 1, than the remove button appears */}\r\n            {questions.length > 1 && (\r\n              <button type=\"button\" onClick={() => handleRemoveQuestion(index)}>\r\n                Remove Question\r\n              </button>\r\n            )}\r\n          </div>\r\n        ))}\r\n        <div className='buttons-container'>\r\n          <button type=\"button\" onClick={handleAddQuestion}>\r\n            Add Question\r\n          </button>\r\n          <button type=\"button\" onClick={handleSaveQuiz}>\r\n            Save Quiz\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default QuizForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}