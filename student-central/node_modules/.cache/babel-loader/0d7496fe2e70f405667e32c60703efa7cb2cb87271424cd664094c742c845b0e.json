{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mohamed Barrie\\\\Documents\\\\Project\\\\Student-Central\\\\student-central\\\\src\\\\components\\\\quiz-page\\\\QuizQuestions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useParams, useNavigate } from 'react-router-dom';\nimport '../../styles/quiz-page/QuizQuestions.css';\n// import \"../components/SavedQuizCard\"\n// import QuizSideBar from './QuizSidebar';\nimport MultipleChoice from './MultipleChoice';\nimport WrittenChoice from './WrittenChoice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QuizQuestions = () => {\n  _s();\n  const navigate = useNavigate();\n  const params = new URLSearchParams(useLocation().search);\n  const {\n    quizName\n  } = useParams();\n  const quizType = params.get('type');\n  console.log(\"quiztype begin\", quizType);\n  const [quizData, setQuizData] = useState({\n    quizName: '',\n    questions: [{\n      term: '',\n      definition: ''\n    }]\n  });\n  const [questionType, setQuestionType] = useState(\"\");\n  const [currentQuestionCount, setCurrentQuestionCount] = useState(0);\n  const [questionOrder, setQuestionOrder] = useState([]);\n  const [quizQuestionsList, setQuizQuestionsList] = useState([]);\n  const [userAnswers, setUserAnswers] = useState({});\n  const [allUserAns, setAllUserAns] = useState([]);\n  const [correctCount, setCorrectCount] = useState(0);\n\n  // if(quizQuestionsList.length != 0){\n  //     console.log(\"quizQuestionsList\", quizQuestionsList[0]);\n  // }\n\n  const getRandomType = () => {\n    if (quizType == \"both\") {\n      let randomNum = Math.floor(Math.random() * 10) + 1;\n      if (randomNum % 2 == 0) {\n        return \"multipleChoice\";\n      } else {\n        return \"written\";\n      }\n    } else {\n      return quizType;\n    }\n  };\n  const createQuestionOrder = defs => {\n    const questionOrder = [];\n    for (let i = 0; i < defs.length; i++) {\n      questionOrder.push(i);\n    }\n    shuffleArr(questionOrder);\n    // questionOrder.shuffle();\n    return questionOrder;\n  };\n  const createMCChoices = (answer, defs) => {\n    let randomNum = Math.floor(Math.random() * 4);\n    const defsCopy = defs.filter(def => def != answer);\n    const arrMC = [];\n    for (let i = 0; i < 4; i++) {\n      if (i != randomNum) {\n        let randomDefIdx = Math.floor(Math.random() * defsCopy.length);\n        arrMC.push(defsCopy[randomDefIdx]);\n        defsCopy.splice(randomDefIdx, 1);\n      } else {\n        arrMC.push(answer);\n      }\n    }\n    return arrMC;\n  };\n  const quizSetup = (quizdata, defs) => {\n    const qORder = createQuestionOrder(defs);\n    console.log(\"qOrder\", qORder);\n    setQuestionOrder(qORder);\n    const entireQuiz = [];\n    for (let i = 0; i < qORder.length; i++) {\n      const questionInfo = {};\n      //set type\n      questionInfo.questionType = getRandomType();\n      questionInfo.term = quizdata.questions[qORder[i]].term;\n      const ans = quizdata.questions[qORder[i]].definition;\n      console.log(\"questionType\", questionInfo.questionType);\n      if (questionInfo.questionType === \"multipleChoice\") {\n        questionInfo.choices = createMCChoices(ans, defs);\n      }\n      questionInfo.answer = ans;\n      console.log(\"questionInfo\", questionInfo);\n      entireQuiz.push(questionInfo);\n      console.log(\"entireQuiz\", entireQuiz);\n    }\n    setQuizQuestionsList(entireQuiz);\n    const emptyAns = [];\n    for (let i = 0; i < entireQuiz.length; i++) {\n      emptyAns.push(\"\");\n    }\n    setAllUserAns(emptyAns);\n  };\n  const shuffleArr = arr => {\n    for (let i = arr.length - 1; i > 0; i--) {\n      let numToSwap = Math.floor(Math.random() * (i + 1));\n      let temp = arr[i];\n      arr[i] = arr[numToSwap];\n      arr[numToSwap] = temp;\n    }\n  };\n  useEffect(() => {\n    const fetchQuizData = async () => {\n      try {\n        const response = await fetch(`http://localhost:4000/api/quiz/get-one-quiz/${quizName}`, {\n          method: 'GET',\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch quiz data.');\n        }\n        const data = await response.json();\n        const quizData = {\n          quizName: quizName,\n          // map out questions from database. Empty string is default\n          questions: data.map(question => ({\n            term: question.term || '',\n            definition: question.definition || ''\n          }))\n        };\n        // Update the state with the retrieved data\n        console.log(\"quizData\", quizData);\n        setQuizData(quizData);\n      } catch (error) {\n        console.log('Error fetching quiz data.', error);\n      }\n    };\n    fetchQuizData();\n  }, []);\n  useEffect(() => {\n    const alldefinitions = quizData.questions.map(question => question.definition);\n    console.log(\"alldefinitions\", alldefinitions);\n    quizSetup(quizData, alldefinitions);\n  }, [quizData]);\n\n  // useEffect(() => {\n  //     console.log(\"quizQuestionsList\",quizQuestionsList.length);\n  // }, [quizQuestionsList])\n\n  // useEffect(() => {\n  //     if(quizQuestionsList.length != 0){\n  //         console.log(quizQuestionsList);\n  //     }\n  // },[quizQuestionsList])\n  // useEffect(() => {\n\n  // }, [currentQuestionCount])\n\n  const handleAnswerChange = answer => {\n    setUserAnswers(prevAnswers => ({\n      ...prevAnswers,\n      [currentQuestionCount]: answer\n    }));\n  };\n\n  //Save user answer(doesnt work yet) and moves to next question\n  const handleNextQuestion = () => {\n    handleAnswerChange(currentQuestionCount, userAnswers);\n    setCurrentQuestionCount(prevIndex => prevIndex + 1);\n  };\n\n  //Save user answer(doesnt work yet) and moves to previous question\n  const handlePreviousQuestion = () => {\n    handleAnswerChange(currentQuestionCount, userAnswers);\n    setCurrentQuestionCount(prevIndex => prevIndex - 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"QuizQuestions-container\",\n    children: quizQuestionsList.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Quiz: \", quizData.quizName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 15\n      }, this), quizQuestionsList[currentQuestionCount].questionType === 'multipleChoice' ? /*#__PURE__*/_jsxDEV(MultipleChoice, {\n        question: quizQuestionsList[currentQuestionCount],\n        onAnswerChange: handleAnswerChange,\n        setAllUserAns: setAllUserAns,\n        allUserAns: allUserAns,\n        currentQuestionIndex: currentQuestionCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(WrittenChoice, {\n        question: quizQuestionsList[currentQuestionCount],\n        currentQuestionIndex: currentQuestionCount,\n        onAnswerChange: handleAnswerChange,\n        userAnswer: userAnswers[currentQuestionCount],\n        setCurrentQuestionCount: setCurrentQuestionCount,\n        totalQuestions: quizQuestionsList.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-navigation\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePreviousQuestion,\n          disabled: currentQuestionCount === 0,\n          children: \"Previous Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 17\n        }, this), currentQuestionCount === quizQuestionsList.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate('/quiz'),\n          children: \"Submit Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextQuestion,\n          children: \"Next Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 9\n  }, this);\n};\n_s(QuizQuestions, \"6mLzOAV6J8kuayaJlVztup3dfoA=\", false, function () {\n  return [useNavigate, useLocation, useParams];\n});\n_c = QuizQuestions;\nexport default QuizQuestions;\nvar _c;\n$RefreshReg$(_c, \"QuizQuestions\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useParams","useNavigate","MultipleChoice","WrittenChoice","jsxDEV","_jsxDEV","Fragment","_Fragment","QuizQuestions","_s","navigate","params","URLSearchParams","search","quizName","quizType","get","console","log","quizData","setQuizData","questions","term","definition","questionType","setQuestionType","currentQuestionCount","setCurrentQuestionCount","questionOrder","setQuestionOrder","quizQuestionsList","setQuizQuestionsList","userAnswers","setUserAnswers","allUserAns","setAllUserAns","correctCount","setCorrectCount","getRandomType","randomNum","Math","floor","random","createQuestionOrder","defs","i","length","push","shuffleArr","createMCChoices","answer","defsCopy","filter","def","arrMC","randomDefIdx","splice","quizSetup","quizdata","qORder","entireQuiz","questionInfo","ans","choices","emptyAns","arr","numToSwap","temp","fetchQuizData","response","fetch","method","credentials","ok","Error","data","json","map","question","error","alldefinitions","handleAnswerChange","prevAnswers","handleNextQuestion","prevIndex","handlePreviousQuestion","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onAnswerChange","currentQuestionIndex","userAnswer","totalQuestions","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Mohamed Barrie/Documents/Project/Student-Central/student-central/src/components/quiz-page/QuizQuestions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation, useParams, useNavigate } from 'react-router-dom';\r\nimport '../../styles/quiz-page/QuizQuestions.css';\r\n// import \"../components/SavedQuizCard\"\r\n// import QuizSideBar from './QuizSidebar';\r\nimport MultipleChoice from './MultipleChoice'\r\nimport WrittenChoice from './WrittenChoice'\r\n\r\nconst QuizQuestions = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const params = new URLSearchParams(useLocation().search);\r\n    const { quizName } = useParams();\r\n    const quizType = params.get('type');\r\n    console.log(\"quiztype begin\",quizType);\r\n    const [quizData, setQuizData] = useState({\r\n        quizName: '',\r\n        questions: [\r\n            {\r\n                term: '',\r\n                definition: '',\r\n            },\r\n        ],\r\n    });\r\n    const [questionType, setQuestionType] = useState(\"\");\r\n    const [currentQuestionCount, setCurrentQuestionCount] = useState(0);\r\n    const [questionOrder, setQuestionOrder] = useState([]);\r\n    \r\n    const [quizQuestionsList, setQuizQuestionsList] = useState([]);\r\n    const [userAnswers, setUserAnswers] = useState({});\r\n    const [allUserAns, setAllUserAns] = useState([]);\r\n    const [correctCount, setCorrectCount] = useState(0);\r\n\r\n    // if(quizQuestionsList.length != 0){\r\n    //     console.log(\"quizQuestionsList\", quizQuestionsList[0]);\r\n    // }\r\n\r\n    const getRandomType = () => {\r\n        if(quizType == \"both\"){\r\n            let randomNum = Math.floor(Math.random() * 10) + 1;\r\n            if (randomNum % 2 == 0) {return \"multipleChoice\"}\r\n            else {return \"written\"}\r\n        }\r\n        else{\r\n            return quizType;\r\n        }\r\n    }\r\n\r\n    const createQuestionOrder = (defs) => {\r\n        const questionOrder = [];\r\n        for(let i = 0; i < defs.length; i++){\r\n            questionOrder.push(i);\r\n        }\r\n        shuffleArr(questionOrder);\r\n        // questionOrder.shuffle();\r\n        return questionOrder;\r\n    }\r\n\r\n    const createMCChoices = (answer, defs) => {\r\n        let randomNum = Math.floor(Math.random() * 4);\r\n        const defsCopy = defs.filter(def => def != answer);\r\n        const arrMC = [];\r\n        for(let i = 0; i < 4; i++){\r\n            if(i != randomNum){\r\n                let randomDefIdx = Math.floor(Math.random() * defsCopy.length);\r\n                arrMC.push(defsCopy[randomDefIdx]);\r\n                defsCopy.splice(randomDefIdx,1);\r\n            }\r\n            else{\r\n                arrMC.push(answer);\r\n            }\r\n        }\r\n        return arrMC;\r\n    }\r\n\r\n    const quizSetup = (quizdata, defs) => {\r\n        const qORder = createQuestionOrder(defs);\r\n        console.log(\"qOrder\",qORder);\r\n        setQuestionOrder(qORder);\r\n        const entireQuiz = [];\r\n        for(let i = 0; i < qORder.length; i++){\r\n            const questionInfo = {};\r\n            //set type\r\n            questionInfo.questionType = getRandomType();\r\n            questionInfo.term = quizdata.questions[qORder[i]].term;\r\n            const ans = quizdata.questions[qORder[i]].definition;\r\n            console.log(\"questionType\", questionInfo.questionType);\r\n            if(questionInfo.questionType === \"multipleChoice\"){\r\n                questionInfo.choices = createMCChoices(ans, defs);\r\n            }\r\n            questionInfo.answer = ans;\r\n\r\n            console.log(\"questionInfo\", questionInfo);\r\n            entireQuiz.push(questionInfo);\r\n            console.log(\"entireQuiz\", entireQuiz);\r\n            \r\n        }\r\n        setQuizQuestionsList(entireQuiz);\r\n\r\n        const emptyAns = [];\r\n        for(let i = 0; i < entireQuiz.length; i++){\r\n            emptyAns.push(\"\");\r\n        }\r\n        setAllUserAns(emptyAns);\r\n    }\r\n\r\n    const shuffleArr = (arr) => {\r\n        for(let i = arr.length-1; i > 0; i--){\r\n            let numToSwap = Math.floor(Math.random() * (i+1));\r\n            let temp = arr[i];\r\n            arr[i] = arr[numToSwap];\r\n            arr[numToSwap] = temp;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchQuizData = async () => {\r\n            try {\r\n                const response = await fetch(`http://localhost:4000/api/quiz/get-one-quiz/${quizName}`, {\r\n                    method: 'GET',\r\n                    credentials: 'include',\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch quiz data.');\r\n                }\r\n                const data = await response.json();\r\n                const quizData = {\r\n                    quizName: quizName,\r\n                    // map out questions from database. Empty string is default\r\n                    questions: data.map((question) => ({\r\n                        term: question.term || '',\r\n                        definition: question.definition || '',\r\n                    })),\r\n                };\r\n                // Update the state with the retrieved data\r\n                console.log(\"quizData\", quizData);\r\n                \r\n                setQuizData(quizData);\r\n            } catch (error) {\r\n                console.log('Error fetching quiz data.', error);\r\n            }\r\n        };\r\n        fetchQuizData();\r\n    },[])\r\n        \r\n    useEffect(() => {\r\n        const alldefinitions = quizData.questions.map((question) => question.definition);\r\n        console.log(\"alldefinitions\", alldefinitions);\r\n        quizSetup(quizData, alldefinitions);\r\n    }, [quizData])\r\n\r\n    // useEffect(() => {\r\n    //     console.log(\"quizQuestionsList\",quizQuestionsList.length);\r\n    // }, [quizQuestionsList])\r\n    \r\n    // useEffect(() => {\r\n    //     if(quizQuestionsList.length != 0){\r\n    //         console.log(quizQuestionsList);\r\n    //     }\r\n    // },[quizQuestionsList])\r\n    // useEffect(() => {\r\n\r\n    // }, [currentQuestionCount])\r\n\r\n    const handleAnswerChange = (answer) => {\r\n        setUserAnswers((prevAnswers) => ({\r\n          ...prevAnswers,\r\n          [currentQuestionCount]: answer,\r\n        }));\r\n      };\r\n      \r\n      //Save user answer(doesnt work yet) and moves to next question\r\n      const handleNextQuestion = () => {\r\n        handleAnswerChange(currentQuestionCount, userAnswers);\r\n        setCurrentQuestionCount((prevIndex) => prevIndex + 1);\r\n      };\r\n\r\n      //Save user answer(doesnt work yet) and moves to previous question\r\n      const handlePreviousQuestion = () => {\r\n        handleAnswerChange(currentQuestionCount, userAnswers);\r\n        setCurrentQuestionCount((prevIndex) => prevIndex - 1);\r\n      };\r\n\r\n    return (\r\n        <div className=\"QuizQuestions-container\">\r\n          {quizQuestionsList.length === 0 ? (\r\n            <div>Loading...</div>\r\n          ) : (\r\n            <>\r\n              <h2>Quiz: {quizData.quizName}</h2>\r\n              {quizQuestionsList[currentQuestionCount].questionType === 'multipleChoice' ? (\r\n                <MultipleChoice\r\n                  question={quizQuestionsList[currentQuestionCount]}\r\n                  onAnswerChange={handleAnswerChange}\r\n                  setAllUserAns={setAllUserAns}\r\n                  allUserAns={allUserAns}\r\n                  currentQuestionIndex={currentQuestionCount}\r\n                />\r\n              ) : (\r\n                <WrittenChoice\r\n                  question={quizQuestionsList[currentQuestionCount]}\r\n              currentQuestionIndex={currentQuestionCount}\r\n              onAnswerChange={handleAnswerChange}\r\n              userAnswer={userAnswers[currentQuestionCount]}\r\n              setCurrentQuestionCount={setCurrentQuestionCount}\r\n              totalQuestions={quizQuestionsList.length}\r\n                />\r\n              )}\r\n    \r\n              <div className=\"question-navigation\">\r\n                <button onClick={handlePreviousQuestion} disabled={currentQuestionCount === 0}>\r\n                  Previous Question\r\n                </button>\r\n                {currentQuestionCount === quizQuestionsList.length - 1 ? (\r\n                  <button onClick={() => navigate('/quiz')}>Submit Quiz</button>\r\n                ) : (\r\n                  <button onClick={handleNextQuestion}>Next Question</button>\r\n                )}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuizQuestions;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACtE,OAAO,0CAA0C;AACjD;AACA;AACA,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,aAAa,MAAM,iBAAiB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE3C,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAE9B,MAAMU,MAAM,GAAG,IAAIC,eAAe,CAACb,WAAW,CAAC,CAAC,CAACc,MAAM,CAAC;EACxD,MAAM;IAAEC;EAAS,CAAC,GAAGd,SAAS,CAAC,CAAC;EAChC,MAAMe,QAAQ,GAAGJ,MAAM,CAACK,GAAG,CAAC,MAAM,CAAC;EACnCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAACH,QAAQ,CAAC;EACtC,MAAM,CAACI,QAAQ,EAAEC,WAAW,CAAC,GAAGvB,QAAQ,CAAC;IACrCiB,QAAQ,EAAE,EAAE;IACZO,SAAS,EAAE,CACP;MACIC,IAAI,EAAE,EAAE;MACRC,UAAU,EAAE;IAChB,CAAC;EAET,CAAC,CAAC;EACF,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC6B,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG9B,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAAC+B,aAAa,EAAEC,gBAAgB,CAAC,GAAGhC,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAM,CAACiC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGlC,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACmC,WAAW,EAAEC,cAAc,CAAC,GAAGpC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,MAAM,CAACqC,UAAU,EAAEC,aAAa,CAAC,GAAGtC,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACuC,YAAY,EAAEC,eAAe,CAAC,GAAGxC,QAAQ,CAAC,CAAC,CAAC;;EAEnD;EACA;EACA;;EAEA,MAAMyC,aAAa,GAAGA,CAAA,KAAM;IACxB,IAAGvB,QAAQ,IAAI,MAAM,EAAC;MAClB,IAAIwB,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC;MAClD,IAAIH,SAAS,GAAG,CAAC,IAAI,CAAC,EAAE;QAAC,OAAO,gBAAgB;MAAA,CAAC,MAC5C;QAAC,OAAO,SAAS;MAAA;IAC1B,CAAC,MACG;MACA,OAAOxB,QAAQ;IACnB;EACJ,CAAC;EAED,MAAM4B,mBAAmB,GAAIC,IAAI,IAAK;IAClC,MAAMhB,aAAa,GAAG,EAAE;IACxB,KAAI,IAAIiB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,IAAI,CAACE,MAAM,EAAED,CAAC,EAAE,EAAC;MAChCjB,aAAa,CAACmB,IAAI,CAACF,CAAC,CAAC;IACzB;IACAG,UAAU,CAACpB,aAAa,CAAC;IACzB;IACA,OAAOA,aAAa;EACxB,CAAC;EAED,MAAMqB,eAAe,GAAGA,CAACC,MAAM,EAAEN,IAAI,KAAK;IACtC,IAAIL,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7C,MAAMS,QAAQ,GAAGP,IAAI,CAACQ,MAAM,CAACC,GAAG,IAAIA,GAAG,IAAIH,MAAM,CAAC;IAClD,MAAMI,KAAK,GAAG,EAAE;IAChB,KAAI,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAC;MACtB,IAAGA,CAAC,IAAIN,SAAS,EAAC;QACd,IAAIgB,YAAY,GAAGf,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGS,QAAQ,CAACL,MAAM,CAAC;QAC9DQ,KAAK,CAACP,IAAI,CAACI,QAAQ,CAACI,YAAY,CAAC,CAAC;QAClCJ,QAAQ,CAACK,MAAM,CAACD,YAAY,EAAC,CAAC,CAAC;MACnC,CAAC,MACG;QACAD,KAAK,CAACP,IAAI,CAACG,MAAM,CAAC;MACtB;IACJ;IACA,OAAOI,KAAK;EAChB,CAAC;EAED,MAAMG,SAAS,GAAGA,CAACC,QAAQ,EAAEd,IAAI,KAAK;IAClC,MAAMe,MAAM,GAAGhB,mBAAmB,CAACC,IAAI,CAAC;IACxC3B,OAAO,CAACC,GAAG,CAAC,QAAQ,EAACyC,MAAM,CAAC;IAC5B9B,gBAAgB,CAAC8B,MAAM,CAAC;IACxB,MAAMC,UAAU,GAAG,EAAE;IACrB,KAAI,IAAIf,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGc,MAAM,CAACb,MAAM,EAAED,CAAC,EAAE,EAAC;MAClC,MAAMgB,YAAY,GAAG,CAAC,CAAC;MACvB;MACAA,YAAY,CAACrC,YAAY,GAAGc,aAAa,CAAC,CAAC;MAC3CuB,YAAY,CAACvC,IAAI,GAAGoC,QAAQ,CAACrC,SAAS,CAACsC,MAAM,CAACd,CAAC,CAAC,CAAC,CAACvB,IAAI;MACtD,MAAMwC,GAAG,GAAGJ,QAAQ,CAACrC,SAAS,CAACsC,MAAM,CAACd,CAAC,CAAC,CAAC,CAACtB,UAAU;MACpDN,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE2C,YAAY,CAACrC,YAAY,CAAC;MACtD,IAAGqC,YAAY,CAACrC,YAAY,KAAK,gBAAgB,EAAC;QAC9CqC,YAAY,CAACE,OAAO,GAAGd,eAAe,CAACa,GAAG,EAAElB,IAAI,CAAC;MACrD;MACAiB,YAAY,CAACX,MAAM,GAAGY,GAAG;MAEzB7C,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE2C,YAAY,CAAC;MACzCD,UAAU,CAACb,IAAI,CAACc,YAAY,CAAC;MAC7B5C,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE0C,UAAU,CAAC;IAEzC;IACA7B,oBAAoB,CAAC6B,UAAU,CAAC;IAEhC,MAAMI,QAAQ,GAAG,EAAE;IACnB,KAAI,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGe,UAAU,CAACd,MAAM,EAAED,CAAC,EAAE,EAAC;MACtCmB,QAAQ,CAACjB,IAAI,CAAC,EAAE,CAAC;IACrB;IACAZ,aAAa,CAAC6B,QAAQ,CAAC;EAC3B,CAAC;EAED,MAAMhB,UAAU,GAAIiB,GAAG,IAAK;IACxB,KAAI,IAAIpB,CAAC,GAAGoB,GAAG,CAACnB,MAAM,GAAC,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAC;MACjC,IAAIqB,SAAS,GAAG1B,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIG,CAAC,GAAC,CAAC,CAAC,CAAC;MACjD,IAAIsB,IAAI,GAAGF,GAAG,CAACpB,CAAC,CAAC;MACjBoB,GAAG,CAACpB,CAAC,CAAC,GAAGoB,GAAG,CAACC,SAAS,CAAC;MACvBD,GAAG,CAACC,SAAS,CAAC,GAAGC,IAAI;IACzB;EACJ,CAAC;EAEDrE,SAAS,CAAC,MAAM;IACZ,MAAMsE,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,+CAA8CxD,QAAS,EAAC,EAAE;UACpFyD,MAAM,EAAE,KAAK;UACbC,WAAW,EAAE;QACjB,CAAC,CAAC;QAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;QACjD;QACA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;QAClC,MAAMzD,QAAQ,GAAG;UACbL,QAAQ,EAAEA,QAAQ;UAClB;UACAO,SAAS,EAAEsD,IAAI,CAACE,GAAG,CAAEC,QAAQ,KAAM;YAC/BxD,IAAI,EAAEwD,QAAQ,CAACxD,IAAI,IAAI,EAAE;YACzBC,UAAU,EAAEuD,QAAQ,CAACvD,UAAU,IAAI;UACvC,CAAC,CAAC;QACN,CAAC;QACD;QACAN,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEC,QAAQ,CAAC;QAEjCC,WAAW,CAACD,QAAQ,CAAC;MACzB,CAAC,CAAC,OAAO4D,KAAK,EAAE;QACZ9D,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAE6D,KAAK,CAAC;MACnD;IACJ,CAAC;IACDX,aAAa,CAAC,CAAC;EACnB,CAAC,EAAC,EAAE,CAAC;EAELtE,SAAS,CAAC,MAAM;IACZ,MAAMkF,cAAc,GAAG7D,QAAQ,CAACE,SAAS,CAACwD,GAAG,CAAEC,QAAQ,IAAKA,QAAQ,CAACvD,UAAU,CAAC;IAChFN,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE8D,cAAc,CAAC;IAC7CvB,SAAS,CAACtC,QAAQ,EAAE6D,cAAc,CAAC;EACvC,CAAC,EAAE,CAAC7D,QAAQ,CAAC,CAAC;;EAEd;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA,MAAM8D,kBAAkB,GAAI/B,MAAM,IAAK;IACnCjB,cAAc,CAAEiD,WAAW,KAAM;MAC/B,GAAGA,WAAW;MACd,CAACxD,oBAAoB,GAAGwB;IAC1B,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAMiC,kBAAkB,GAAGA,CAAA,KAAM;IAC/BF,kBAAkB,CAACvD,oBAAoB,EAAEM,WAAW,CAAC;IACrDL,uBAAuB,CAAEyD,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;EACvD,CAAC;;EAED;EACA,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;IACnCJ,kBAAkB,CAACvD,oBAAoB,EAAEM,WAAW,CAAC;IACrDL,uBAAuB,CAAEyD,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;EACvD,CAAC;EAEH,oBACI/E,OAAA;IAAKiF,SAAS,EAAC,yBAAyB;IAAAC,QAAA,EACrCzD,iBAAiB,CAACgB,MAAM,KAAK,CAAC,gBAC7BzC,OAAA;MAAAkF,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,gBAErBtF,OAAA,CAAAE,SAAA;MAAAgF,QAAA,gBACElF,OAAA;QAAAkF,QAAA,GAAI,QAAM,EAACpE,QAAQ,CAACL,QAAQ;MAAA;QAAA0E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EACjC7D,iBAAiB,CAACJ,oBAAoB,CAAC,CAACF,YAAY,KAAK,gBAAgB,gBACxEnB,OAAA,CAACH,cAAc;QACb4E,QAAQ,EAAEhD,iBAAiB,CAACJ,oBAAoB,CAAE;QAClDkE,cAAc,EAAEX,kBAAmB;QACnC9C,aAAa,EAAEA,aAAc;QAC7BD,UAAU,EAAEA,UAAW;QACvB2D,oBAAoB,EAAEnE;MAAqB;QAAA8D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C,CAAC,gBAEFtF,OAAA,CAACF,aAAa;QACZ2E,QAAQ,EAAEhD,iBAAiB,CAACJ,oBAAoB,CAAE;QACtDmE,oBAAoB,EAAEnE,oBAAqB;QAC3CkE,cAAc,EAAEX,kBAAmB;QACnCa,UAAU,EAAE9D,WAAW,CAACN,oBAAoB,CAAE;QAC9CC,uBAAuB,EAAEA,uBAAwB;QACjDoE,cAAc,EAAEjE,iBAAiB,CAACgB;MAAO;QAAA0C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CACF,eAEDtF,OAAA;QAAKiF,SAAS,EAAC,qBAAqB;QAAAC,QAAA,gBAClClF,OAAA;UAAQ2F,OAAO,EAAEX,sBAAuB;UAACY,QAAQ,EAAEvE,oBAAoB,KAAK,CAAE;UAAA6D,QAAA,EAAC;QAE/E;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACRjE,oBAAoB,KAAKI,iBAAiB,CAACgB,MAAM,GAAG,CAAC,gBACpDzC,OAAA;UAAQ2F,OAAO,EAAEA,CAAA,KAAMtF,QAAQ,CAAC,OAAO,CAAE;UAAA6E,QAAA,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,gBAE9DtF,OAAA;UAAQ2F,OAAO,EAAEb,kBAAmB;UAAAI,QAAA,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAC3D;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA,eACN;EACH;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEd,CAAC;AAAClF,EAAA,CAxNID,aAAa;EAAA,QACEP,WAAW,EAEOF,WAAW,EACzBC,SAAS;AAAA;AAAAkG,EAAA,GAJ5B1F,aAAa;AA0NnB,eAAeA,aAAa;AAAC,IAAA0F,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}