{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ninay\\\\Documents\\\\capstone-499\\\\Student-Central\\\\student-central\\\\src\\\\components\\\\quiz-page\\\\QuizQuestions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport '../../styles/quiz-page/QuizQuestions.css';\n// import \"../components/SavedQuizCard\"\n// import QuizSideBar from './QuizSidebar';\nimport MultipleChoice from './MultipleChoice';\nimport WrittenChoice from './WrittenChoice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizQuestions = () => {\n  _s();\n  const params = new URLSearchParams(useLocation().search);\n  const {\n    quizName\n  } = useParams();\n  const quizType = params.get('quizType');\n  const [quizData, setQuizData] = useState({\n    quizName: '',\n    questions: [{\n      term: '',\n      definition: ''\n    }]\n  });\n  const [questionType, setQuestionType] = useState(\"\");\n  const [currentQuestionCount, setCurrentQuestionCount] = useState(0);\n  const [questionOrder, setQuestionOrder] = useState([]);\n  const alldefinitions = quizData.questions.map(question => question.definition);\n  const [quizQuestionsList, setQuizQuestionsList] = useState([]);\n\n  // if(quizQuestionsList.length != 0){\n  //     console.log(\"quizQuestionsList\", quizQuestionsList[0]);\n  // }\n\n  const getRandomType = () => {\n    if (quizType == \"both\") {\n      let randomNum = Math.random() * 10 + 1;\n      if (randomNum % 2 == 0) {\n        return \"multipleChoice\";\n      } else {\n        return \"written\";\n      }\n    } else {\n      return quizType;\n    }\n  };\n  const createQuestionOrder = () => {\n    const questionOrder = [];\n    for (let i = 0; i < alldefinitions.length; i++) {\n      questionOrder.push(i);\n    }\n    shuffleArr(questionOrder);\n    // questionOrder.shuffle();\n    return questionOrder;\n  };\n  const createMCChoices = answer => {\n    let randomNum = Math.random() * 4;\n    const arrMC = [];\n    for (let i = 0; i < 4; i++) {\n      if (i != randomNum) {\n        let randomDefIdx = Math.random() * alldefinitions.length;\n        arrMC.push(alldefinitions[randomDefIdx]);\n      } else {\n        arrMC.push(answer);\n      }\n    }\n    return arrMC;\n  };\n  const quizSetup = () => {\n    const qORder = createQuestionOrder();\n    setQuestionOrder(qORder);\n    const entireQuiz = [];\n    for (let i = 0; i < qORder.length; i++) {\n      const questionInfo = {};\n      //set type\n      questionInfo.questionType = getRandomType();\n      questionInfo.term = quizData.questions[qORder[i]].term;\n      const ans = quizData.questions[qORder[i]].definition;\n      if (questionInfo.questionType == \"multipleChoice\") {\n        questionInfo.choices = createMCChoices(ans);\n      }\n      questionInfo.answer = ans;\n      entireQuiz.push(questionInfo);\n    }\n    setQuizQuestionsList(entireQuiz);\n  };\n  const shuffleArr = arr => {\n    for (let i = arr.length - 1; i > 0; i++) {\n      let numToSwap = Math.floor(Math.random() * (i + 1));\n      let temp = arr[i];\n      arr[i] = arr[numToSwap];\n      arr[numToSwap] = temp;\n    }\n  };\n  useEffect(() => {\n    const fetchQuizData = async () => {\n      try {\n        const response = await fetch(`http://localhost:4000/api/quiz/get-one-quiz/${quizName}`, {\n          method: 'GET',\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch quiz data.');\n        }\n        const data = await response.json();\n        const quizData = {\n          quizName: quizName,\n          // map out questions from database. Empty string is default\n          questions: data.map(question => ({\n            term: question.term || '',\n            definition: question.definition || ''\n          }))\n        };\n        // Update the state with the retrieved data\n        console.log(\"quizData\", quizData);\n        setQuizData(quizData);\n      } catch (error) {\n        console.log('Error fetching quiz data.', error);\n      }\n    };\n    fetchQuizData();\n\n    //quiz creation\n    quizSetup();\n\n    // const initialQuestionType = () => {\n    //     if (quizType == \"multipleChoice\") {\n\n    //     }\n    // }\n  }, []);\n\n  // useEffect(() => {\n\n  // }, [currentQuestionCount])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"QuizQuestions-container\",\n    children: quizQuestionsList.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 49\n    }, this) : quizQuestionsList[currentQuestionCount].questionType == \"multipleChoice\" ? /*#__PURE__*/_jsxDEV(MultipleChoice, {\n      question: quizQuestionsList[currentQuestionCount],\n      setCurrentQuestionCount: setCurrentQuestionCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(WrittenChoice, {\n      question: quizQuestionsList[currentQuestionCount],\n      setCurrentQuestionCount: setCurrentQuestionCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 9\n  }, this);\n};\n_s(QuizQuestions, \"cSl7TiMtQhucLkWpdz2ow2oOEpE=\", false, function () {\n  return [useLocation, useParams];\n});\n_c = QuizQuestions;\nexport default QuizQuestions;\nvar _c;\n$RefreshReg$(_c, \"QuizQuestions\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useParams","MultipleChoice","WrittenChoice","jsxDEV","_jsxDEV","QuizQuestions","_s","params","URLSearchParams","search","quizName","quizType","get","quizData","setQuizData","questions","term","definition","questionType","setQuestionType","currentQuestionCount","setCurrentQuestionCount","questionOrder","setQuestionOrder","alldefinitions","map","question","quizQuestionsList","setQuizQuestionsList","getRandomType","randomNum","Math","random","createQuestionOrder","i","length","push","shuffleArr","createMCChoices","answer","arrMC","randomDefIdx","quizSetup","qORder","entireQuiz","questionInfo","ans","choices","arr","numToSwap","floor","temp","fetchQuizData","response","fetch","method","credentials","ok","Error","data","json","console","log","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ninay/Documents/capstone-499/Student-Central/student-central/src/components/quiz-page/QuizQuestions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport '../../styles/quiz-page/QuizQuestions.css';\r\n// import \"../components/SavedQuizCard\"\r\n// import QuizSideBar from './QuizSidebar';\r\nimport MultipleChoice from './MultipleChoice'\r\nimport WrittenChoice from './WrittenChoice'\r\n\r\nconst QuizQuestions = () => {\r\n    const params = new URLSearchParams(useLocation().search);\r\n    const { quizName } = useParams();\r\n    const quizType = params.get('quizType');\r\n    const [quizData, setQuizData] = useState({\r\n        quizName: '',\r\n        questions: [\r\n            {\r\n                term: '',\r\n                definition: '',\r\n            },\r\n        ],\r\n    });\r\n    const [questionType, setQuestionType] = useState(\"\");\r\n    const [currentQuestionCount, setCurrentQuestionCount] = useState(0);\r\n    const [questionOrder, setQuestionOrder] = useState([]);\r\n    const alldefinitions = quizData.questions.map((question) => question.definition);\r\n    const [quizQuestionsList, setQuizQuestionsList] = useState([]);\r\n\r\n    // if(quizQuestionsList.length != 0){\r\n    //     console.log(\"quizQuestionsList\", quizQuestionsList[0]);\r\n    // }\r\n\r\n    const getRandomType = () => {\r\n        if(quizType == \"both\"){\r\n            let randomNum = Math.random() * 10 + 1;\r\n            if (randomNum % 2 == 0) {return \"multipleChoice\"}\r\n            else {return \"written\"}\r\n        }\r\n        else{\r\n            return quizType;\r\n        }\r\n    }\r\n\r\n    const createQuestionOrder = () => {\r\n        const questionOrder = [];\r\n        for(let i = 0; i < alldefinitions.length; i++){\r\n            questionOrder.push(i);\r\n        }\r\n        shuffleArr(questionOrder);\r\n        // questionOrder.shuffle();\r\n        return questionOrder;\r\n    }\r\n\r\n    const createMCChoices = (answer) => {\r\n        let randomNum = Math.random() * 4;\r\n        const arrMC = [];\r\n        for(let i = 0; i < 4; i++){\r\n            if(i != randomNum){\r\n                let randomDefIdx = Math.random() * alldefinitions.length;\r\n                arrMC.push(alldefinitions[randomDefIdx]);\r\n            }\r\n            else{\r\n                arrMC.push(answer);\r\n            }\r\n        }\r\n        return arrMC;\r\n    }\r\n\r\n    const quizSetup = () => {\r\n        const qORder = createQuestionOrder();\r\n        setQuestionOrder(qORder);\r\n        const entireQuiz = [];\r\n        for(let i = 0; i < qORder.length; i++){\r\n            const questionInfo = {};\r\n            //set type\r\n            questionInfo.questionType = getRandomType();\r\n            questionInfo.term = quizData.questions[qORder[i]].term;\r\n            const ans = quizData.questions[qORder[i]].definition;\r\n            if(questionInfo.questionType == \"multipleChoice\"){\r\n                questionInfo.choices = createMCChoices(ans);\r\n            }\r\n            questionInfo.answer = ans;\r\n\r\n            entireQuiz.push(questionInfo);\r\n        }\r\n        setQuizQuestionsList(entireQuiz);\r\n    }\r\n\r\n    const shuffleArr = (arr) => {\r\n        for(let i = arr.length-1; i > 0; i++){\r\n            let numToSwap = Math.floor(Math.random() * (i+1));\r\n            let temp = arr[i];\r\n            arr[i] = arr[numToSwap];\r\n            arr[numToSwap] = temp;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchQuizData = async () => {\r\n            try {\r\n                const response = await fetch(`http://localhost:4000/api/quiz/get-one-quiz/${quizName}`, {\r\n                    method: 'GET',\r\n                    credentials: 'include',\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch quiz data.');\r\n                }\r\n                const data = await response.json();\r\n                const quizData = {\r\n                    quizName: quizName,\r\n                    // map out questions from database. Empty string is default\r\n                    questions: data.map((question) => ({\r\n                        term: question.term || '',\r\n                        definition: question.definition || '',\r\n                    })),\r\n                };\r\n                // Update the state with the retrieved data\r\n                console.log(\"quizData\", quizData);\r\n                setQuizData(quizData);\r\n            } catch (error) {\r\n                console.log('Error fetching quiz data.', error);\r\n            }\r\n        };\r\n        fetchQuizData();\r\n\r\n        //quiz creation\r\n        quizSetup();\r\n        \r\n        // const initialQuestionType = () => {\r\n        //     if (quizType == \"multipleChoice\") {\r\n\r\n        //     }\r\n        // }\r\n    },[])\r\n\r\n    // useEffect(() => {\r\n\r\n    // }, [currentQuestionCount])\r\n\r\n    return (\r\n        <div className=\"QuizQuestions-container\">\r\n            {/* <QuizSideBar/> */}\r\n            {(quizQuestionsList.length === 0) ? <div>Loading</div> :\r\n            (quizQuestionsList[currentQuestionCount].questionType == \"multipleChoice\") ? \r\n            <MultipleChoice \r\n                question={quizQuestionsList[currentQuestionCount]} \r\n                setCurrentQuestionCount={setCurrentQuestionCount}/> : \r\n            <WrittenChoice \r\n                question={quizQuestionsList[currentQuestionCount]} \r\n                setCurrentQuestionCount={setCurrentQuestionCount}/>\r\n            }\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuizQuestions;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}