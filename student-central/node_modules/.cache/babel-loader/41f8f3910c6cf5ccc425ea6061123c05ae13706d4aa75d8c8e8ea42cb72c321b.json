{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ninay\\\\Documents\\\\capstone-499\\\\Student-Central\\\\student-central\\\\src\\\\components\\\\quiz-page\\\\QuizQuestions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport '../../styles/quiz-page/QuizQuestions.css';\n// import \"../components/SavedQuizCard\"\n// import QuizSideBar from './QuizSidebar';\nimport MultipleChoice from './MultipleChoice';\nimport WrittenChoice from './WrittenChoice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizQuestions = () => {\n  _s();\n  const params = new URLSearchParams(useLocation().search);\n  const {\n    quizName\n  } = useParams();\n  const quizType = params.get('quizType');\n  const [quizData, setQuizData] = useState({\n    quizName: '',\n    questions: [{\n      term: '',\n      definition: ''\n    }]\n  });\n  const alldefinitions = quizData.questions.map((term, def) => def);\n  console.log(\"Def\", alldefinitions);\n  const randomType = () => {\n    let randomNum = Math.random() * 10 + 1;\n    if (randomNum % 2 == 0) {\n      return \"multipleChoice\";\n    } else {\n      return \"written\";\n    }\n  };\n  const [questionType, setQuestionType] = useState(quizType == \"multipleChoice\" || quizType == \"written\" ? quizType : randomType);\n  useEffect(() => {\n    const fetchQuizData = async () => {\n      try {\n        const response = await fetch(`http://localhost:4000/api/quiz/get-one-quiz/${quizName}`, {\n          method: 'GET',\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch quiz data.');\n        }\n        const data = await response.json();\n        const quizData = {\n          quizName: quizName,\n          // map out questions from database. Empty string is default\n          questions: data.map(question => ({\n            term: question.term || '',\n            definition: question.definition || ''\n          }))\n        };\n        // Update the state with the retrieved data\n        console.log(\"quizData\", quizData);\n        setQuizData(quizData);\n      } catch (error) {\n        console.log('Error fetching quiz data.', error);\n      }\n    };\n    fetchQuizData();\n    const initialQuestionType = () => {\n      if (quizType == \"multipleChoice\") {}\n    };\n  });\n  useEffect(() => {}, [questionType]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"QuizQuestions-container\",\n    children: questionType == \"multipleChoice\" ? /*#__PURE__*/_jsxDEV(MultipleChoice, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 49\n    }, this) : /*#__PURE__*/_jsxDEV(WrittenChoice, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 70\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_s(QuizQuestions, \"ETKUxsFUHan7xokne2JuEL0b3Bs=\", false, function () {\n  return [useLocation, useParams];\n});\n_c = QuizQuestions;\nexport default QuizQuestions;\nvar _c;\n$RefreshReg$(_c, \"QuizQuestions\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useParams","MultipleChoice","WrittenChoice","jsxDEV","_jsxDEV","QuizQuestions","_s","params","URLSearchParams","search","quizName","quizType","get","quizData","setQuizData","questions","term","definition","alldefinitions","map","def","console","log","randomType","randomNum","Math","random","questionType","setQuestionType","fetchQuizData","response","fetch","method","credentials","ok","Error","data","json","question","error","initialQuestionType","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ninay/Documents/capstone-499/Student-Central/student-central/src/components/quiz-page/QuizQuestions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport '../../styles/quiz-page/QuizQuestions.css';\r\n// import \"../components/SavedQuizCard\"\r\n// import QuizSideBar from './QuizSidebar';\r\nimport MultipleChoice from './MultipleChoice'\r\nimport WrittenChoice from './WrittenChoice'\r\n\r\nconst QuizQuestions = () => {\r\n    const params = new URLSearchParams(useLocation().search);\r\n    const { quizName } = useParams();\r\n    const quizType = params.get('quizType');\r\n    const [quizData, setQuizData] = useState({\r\n        quizName: '',\r\n        questions: [\r\n            {\r\n                term: '',\r\n                definition: '',\r\n            },\r\n        ],\r\n    });\r\n\r\n    const alldefinitions = quizData.questions.map((term, def) => def);\r\n    console.log(\"Def\", alldefinitions);\r\n\r\n    const randomType = () => {\r\n        let randomNum = Math.random() * 10 + 1;\r\n        if (randomNum % 2 == 0) {\r\n            return \"multipleChoice\"\r\n        }\r\n        else {\r\n            return \"written\"\r\n        }\r\n    }\r\n\r\n    const [questionType, setQuestionType] = useState(quizType == \"multipleChoice\" || quizType == \"written\" ? quizType : randomType);\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchQuizData = async () => {\r\n            try {\r\n                const response = await fetch(`http://localhost:4000/api/quiz/get-one-quiz/${quizName}`, {\r\n                    method: 'GET',\r\n                    credentials: 'include',\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch quiz data.');\r\n                }\r\n                const data = await response.json();\r\n                const quizData = {\r\n                    quizName: quizName,\r\n                    // map out questions from database. Empty string is default\r\n                    questions: data.map((question) => ({\r\n                        term: question.term || '',\r\n                        definition: question.definition || '',\r\n                    })),\r\n                };\r\n                // Update the state with the retrieved data\r\n                console.log(\"quizData\", quizData);\r\n                setQuizData(quizData);\r\n            } catch (error) {\r\n                console.log('Error fetching quiz data.', error);\r\n            }\r\n        };\r\n        fetchQuizData();\r\n\r\n        const initialQuestionType = () => {\r\n            if (quizType == \"multipleChoice\") {\r\n\r\n            }\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n    }, [questionType])\r\n\r\n    return (\r\n        <div className=\"QuizQuestions-container\">\r\n            {/* <QuizSideBar/> */}\r\n            {questionType == \"multipleChoice\" ? <MultipleChoice /> : <WrittenChoice />}\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuizQuestions;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}