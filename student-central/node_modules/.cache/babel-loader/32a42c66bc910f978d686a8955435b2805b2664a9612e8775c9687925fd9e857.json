{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ninay\\\\Documents\\\\capstone-499\\\\Student-Central\\\\student-central\\\\src\\\\components\\\\quiz-page\\\\QuizQuestions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport '../../styles/quiz-page/QuizQuestions.css';\n// import \"../components/SavedQuizCard\"\n// import QuizSideBar from './QuizSidebar';\nimport MultipleChoice from './MultipleChoice';\nimport WrittenChoice from './WrittenChoice';\nimport QuizResults from './QuizResults';\nimport QuizSideBar from './QuizSidebar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QuizQuestions = () => {\n  _s();\n  //get query param\n  const params = new URLSearchParams(useLocation().search);\n  const quizType = params.get('type');\n  //get quiz name from param\n  const {\n    quizName\n  } = useParams();\n\n  // console.log(\"quiztype begin\", quizType);\n  const [quizData, setQuizData] = useState({\n    quizName: '',\n    questions: [{\n      term: '',\n      definition: ''\n    }]\n  });\n  const [questionType, setQuestionType] = useState(\"\");\n  const [currentQuestionCount, setCurrentQuestionCount] = useState(0);\n  const [questionOrder, setQuestionOrder] = useState([]);\n  const [quizQuestionsList, setQuizQuestionsList] = useState([]);\n  const [userAnswers, setUserAnswers] = useState({});\n  const [allUserAns, setAllUserAns] = useState([]);\n  const [correctCount, setCorrectCount] = useState(0);\n  const [submitted, setSubmitted] = useState(false);\n\n  // if(quizQuestionsList.length != 0){\n  //     console.log(\"quizQuestionsList\", quizQuestionsList[0]);\n  // }\n\n  const getRandomType = () => {\n    if (quizType == \"both\") {\n      let randomNum = Math.floor(Math.random() * 10) + 1;\n      if (randomNum % 2 == 0) {\n        return \"multipleChoice\";\n      } else {\n        return \"written\";\n      }\n    } else {\n      return quizType;\n    }\n  };\n  const createQuestionOrder = defs => {\n    const questionOrder = [];\n    for (let i = 0; i < defs.length; i++) {\n      questionOrder.push(i);\n    }\n    shuffleArr(questionOrder);\n    // questionOrder.shuffle();\n    return questionOrder;\n  };\n  const createMCChoices = (answer, defs) => {\n    let randomNum = Math.floor(Math.random() * 4);\n    const firstIdx = defs.findIndex(x => x === answer);\n    const defsCopy = defs.filter((def, index) => index != firstIdx);\n    const arrMC = [];\n    for (let i = 0; i < 4; i++) {\n      if (i != randomNum) {\n        let randomDefIdx = Math.floor(Math.random() * defsCopy.length);\n        arrMC.push(defsCopy[randomDefIdx]);\n        defsCopy.splice(randomDefIdx, 1);\n      } else {\n        arrMC.push(answer);\n      }\n    }\n    return arrMC;\n  };\n  const quizSetup = (quizdata, defs) => {\n    const qORder = createQuestionOrder(defs);\n    console.log(\"qOrder\", qORder);\n    setQuestionOrder(qORder);\n    const entireQuiz = [];\n    for (let i = 0; i < qORder.length; i++) {\n      const questionInfo = {};\n      //set type\n      questionInfo.questionType = getRandomType();\n      questionInfo.term = quizdata.questions[qORder[i]].term;\n      const ans = quizdata.questions[qORder[i]].definition;\n      console.log(\"questionType\", questionInfo.questionType);\n      if (questionInfo.questionType === \"multipleChoice\") {\n        questionInfo.choices = createMCChoices(ans, defs);\n      }\n      questionInfo.answer = ans;\n      console.log(\"questionInfo\", questionInfo);\n      entireQuiz.push(questionInfo);\n      console.log(\"entireQuiz\", entireQuiz);\n    }\n    setQuizQuestionsList(entireQuiz);\n    const emptyAns = [];\n    for (let i = 0; i < entireQuiz.length; i++) {\n      emptyAns.push(\"\");\n    }\n    setAllUserAns(emptyAns);\n  };\n  const shuffleArr = arr => {\n    for (let i = arr.length - 1; i > 0; i--) {\n      let numToSwap = Math.floor(Math.random() * (i + 1));\n      let temp = arr[i];\n      arr[i] = arr[numToSwap];\n      arr[numToSwap] = temp;\n    }\n  };\n  useEffect(() => {\n    const fetchQuizData = async () => {\n      try {\n        const response = await fetch(`http://localhost:4000/api/quiz/get-one-quiz/${quizName}`, {\n          method: 'GET',\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch quiz data.');\n        }\n        const data = await response.json();\n        const quizData = {\n          quizName: quizName,\n          // map out questions from database. Empty string is default\n          questions: data.map(question => ({\n            term: question.term || '',\n            definition: question.definition || ''\n          }))\n        };\n        // Update the state with the retrieved data\n        console.log(\"quizData\", quizData);\n        setQuizData(quizData);\n      } catch (error) {\n        console.log('Error fetching quiz data.', error);\n      }\n    };\n    fetchQuizData();\n  }, []);\n  useEffect(() => {\n    const alldefinitions = quizData.questions.map(question => question.definition);\n    console.log(\"alldefinitions\", alldefinitions);\n    quizSetup(quizData, alldefinitions);\n  }, [quizData]);\n\n  // useEffect(() => {\n  //     console.log(\"quizQuestionsList\",quizQuestionsList.length);\n  // }, [quizQuestionsList])\n\n  // useEffect(() => {\n  //     if(quizQuestionsList.length != 0){\n  //         console.log(quizQuestionsList);\n  //     }\n  // },[quizQuestionsList])\n  // useEffect(() => {\n\n  // }, [currentQuestionCount])\n\n  const handleAnswerChange = answer => {\n    setUserAnswers(prevAnswers => ({\n      ...prevAnswers,\n      [currentQuestionCount]: answer\n    }));\n  };\n\n  //Save user answer(doesnt work yet) and moves to next question\n  const handleNextQuestion = () => {\n    handleAnswerChange(currentQuestionCount, userAnswers);\n    setCurrentQuestionCount(prevIndex => prevIndex + 1);\n  };\n\n  //Save user answer(doesnt work yet) and moves to previous question\n  const handlePreviousQuestion = () => {\n    handleAnswerChange(currentQuestionCount, userAnswers);\n    setCurrentQuestionCount(prevIndex => prevIndex - 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"QuizQuestions-container\",\n    children: quizQuestionsList.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this) : submitted ? /*#__PURE__*/_jsxDEV(QuizResults, {\n      allUserAns: allUserAns,\n      quizQuestionsList: quizQuestionsList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Quiz: \", quizData.quizName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(QuizSideBar, {\n        allUserAns: allUserAns,\n        setCurrentQuestionCount: setCurrentQuestionCount,\n        currentQuestionCount: currentQuestionCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }, this), quizQuestionsList[currentQuestionCount].questionType === 'multipleChoice' ? /*#__PURE__*/_jsxDEV(MultipleChoice, {\n        question: quizQuestionsList[currentQuestionCount],\n        onAnswerChange: handleAnswerChange,\n        setAllUserAns: setAllUserAns,\n        allUserAns: allUserAns,\n        currentQuestionIndex: currentQuestionCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(WrittenChoice, {\n        question: quizQuestionsList[currentQuestionCount],\n        currentQuestionIndex: currentQuestionCount,\n        onAnswerChange: handleAnswerChange,\n        setAllUserAns: setAllUserAns,\n        allUserAns: allUserAns,\n        userAnswer: allUserAns[currentQuestionCount] || '',\n        setCurrentQuestionCount: setCurrentQuestionCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-navigation\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePreviousQuestion,\n          disabled: currentQuestionCount === 0,\n          children: \"Previous Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 15\n        }, this), currentQuestionCount === quizQuestionsList.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSubmitted(true),\n          children: \"Submit Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextQuestion,\n          children: \"Next Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizQuestions, \"coRaBFFUwAxCHQcZcdIwCDdzxRs=\", false, function () {\n  return [useLocation, useParams];\n});\n_c = QuizQuestions;\nexport default QuizQuestions;\nvar _c;\n$RefreshReg$(_c, \"QuizQuestions\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useParams","MultipleChoice","WrittenChoice","QuizResults","QuizSideBar","jsxDEV","_jsxDEV","Fragment","_Fragment","QuizQuestions","_s","params","URLSearchParams","search","quizType","get","quizName","quizData","setQuizData","questions","term","definition","questionType","setQuestionType","currentQuestionCount","setCurrentQuestionCount","questionOrder","setQuestionOrder","quizQuestionsList","setQuizQuestionsList","userAnswers","setUserAnswers","allUserAns","setAllUserAns","correctCount","setCorrectCount","submitted","setSubmitted","getRandomType","randomNum","Math","floor","random","createQuestionOrder","defs","i","length","push","shuffleArr","createMCChoices","answer","firstIdx","findIndex","x","defsCopy","filter","def","index","arrMC","randomDefIdx","splice","quizSetup","quizdata","qORder","console","log","entireQuiz","questionInfo","ans","choices","emptyAns","arr","numToSwap","temp","fetchQuizData","response","fetch","method","credentials","ok","Error","data","json","map","question","error","alldefinitions","handleAnswerChange","prevAnswers","handleNextQuestion","prevIndex","handlePreviousQuestion","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onAnswerChange","currentQuestionIndex","userAnswer","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ninay/Documents/capstone-499/Student-Central/student-central/src/components/quiz-page/QuizQuestions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport '../../styles/quiz-page/QuizQuestions.css';\r\n// import \"../components/SavedQuizCard\"\r\n// import QuizSideBar from './QuizSidebar';\r\nimport MultipleChoice from './MultipleChoice'\r\nimport WrittenChoice from './WrittenChoice'\r\nimport QuizResults from './QuizResults'\r\nimport QuizSideBar from './QuizSidebar';\r\n\r\nconst QuizQuestions = () => {\r\n\r\n  //get query param\r\n  const params = new URLSearchParams(useLocation().search);\r\n  const quizType = params.get('type');\r\n  //get quiz name from param\r\n  const { quizName } = useParams();\r\n  \r\n  // console.log(\"quiztype begin\", quizType);\r\n  const [quizData, setQuizData] = useState({\r\n    quizName: '',\r\n    questions: [\r\n      {\r\n        term: '',\r\n        definition: '',\r\n      },\r\n    ],\r\n  });\r\n  const [questionType, setQuestionType] = useState(\"\");\r\n  const [currentQuestionCount, setCurrentQuestionCount] = useState(0);\r\n  const [questionOrder, setQuestionOrder] = useState([]);\r\n\r\n  const [quizQuestionsList, setQuizQuestionsList] = useState([]);\r\n  const [userAnswers, setUserAnswers] = useState({});\r\n  const [allUserAns, setAllUserAns] = useState([]);\r\n  const [correctCount, setCorrectCount] = useState(0);\r\n\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  // if(quizQuestionsList.length != 0){\r\n  //     console.log(\"quizQuestionsList\", quizQuestionsList[0]);\r\n  // }\r\n\r\n  const getRandomType = () => {\r\n    if (quizType == \"both\") {\r\n      let randomNum = Math.floor(Math.random() * 10) + 1;\r\n      if (randomNum % 2 == 0) { return \"multipleChoice\" }\r\n      else { return \"written\" }\r\n    }\r\n    else {\r\n      return quizType;\r\n    }\r\n  }\r\n\r\n  const createQuestionOrder = (defs) => {\r\n    const questionOrder = [];\r\n    for (let i = 0; i < defs.length; i++) {\r\n      questionOrder.push(i);\r\n    }\r\n    shuffleArr(questionOrder);\r\n    // questionOrder.shuffle();\r\n    return questionOrder;\r\n  }\r\n\r\n  const createMCChoices = (answer, defs) => {\r\n    let randomNum = Math.floor(Math.random() * 4);\r\n    const firstIdx = defs.findIndex(x => x === answer);\r\n    const defsCopy = defs.filter((def, index) => index != firstIdx);\r\n    const arrMC = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      if (i != randomNum) {\r\n        let randomDefIdx = Math.floor(Math.random() * defsCopy.length);\r\n        arrMC.push(defsCopy[randomDefIdx]);\r\n        defsCopy.splice(randomDefIdx, 1);\r\n      }\r\n      else {\r\n        arrMC.push(answer);\r\n      }\r\n    }\r\n    return arrMC;\r\n  }\r\n\r\n  const quizSetup = (quizdata, defs) => {\r\n    const qORder = createQuestionOrder(defs);\r\n    console.log(\"qOrder\", qORder);\r\n    setQuestionOrder(qORder);\r\n    const entireQuiz = [];\r\n    for (let i = 0; i < qORder.length; i++) {\r\n      const questionInfo = {};\r\n      //set type\r\n      questionInfo.questionType = getRandomType();\r\n      questionInfo.term = quizdata.questions[qORder[i]].term;\r\n      const ans = quizdata.questions[qORder[i]].definition;\r\n      console.log(\"questionType\", questionInfo.questionType);\r\n      if (questionInfo.questionType === \"multipleChoice\") {\r\n        questionInfo.choices = createMCChoices(ans, defs);\r\n      }\r\n      questionInfo.answer = ans;\r\n\r\n      console.log(\"questionInfo\", questionInfo);\r\n      entireQuiz.push(questionInfo);\r\n      console.log(\"entireQuiz\", entireQuiz);\r\n\r\n    }\r\n    setQuizQuestionsList(entireQuiz);\r\n\r\n    const emptyAns = [];\r\n    for (let i = 0; i < entireQuiz.length; i++) {\r\n      emptyAns.push(\"\");\r\n    }\r\n    setAllUserAns(emptyAns);\r\n  }\r\n\r\n  const shuffleArr = (arr) => {\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n      let numToSwap = Math.floor(Math.random() * (i + 1));\r\n      let temp = arr[i];\r\n      arr[i] = arr[numToSwap];\r\n      arr[numToSwap] = temp;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchQuizData = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:4000/api/quiz/get-one-quiz/${quizName}`, {\r\n          method: 'GET',\r\n          credentials: 'include',\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch quiz data.');\r\n        }\r\n        const data = await response.json();\r\n        const quizData = {\r\n          quizName: quizName,\r\n          // map out questions from database. Empty string is default\r\n          questions: data.map((question) => ({\r\n            term: question.term || '',\r\n            definition: question.definition || '',\r\n          })),\r\n        };\r\n        // Update the state with the retrieved data\r\n        console.log(\"quizData\", quizData);\r\n\r\n        setQuizData(quizData);\r\n      } catch (error) {\r\n        console.log('Error fetching quiz data.', error);\r\n      }\r\n    };\r\n    fetchQuizData();\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const alldefinitions = quizData.questions.map((question) => question.definition);\r\n    console.log(\"alldefinitions\", alldefinitions);\r\n    quizSetup(quizData, alldefinitions);\r\n  }, [quizData])\r\n\r\n  // useEffect(() => {\r\n  //     console.log(\"quizQuestionsList\",quizQuestionsList.length);\r\n  // }, [quizQuestionsList])\r\n\r\n  // useEffect(() => {\r\n  //     if(quizQuestionsList.length != 0){\r\n  //         console.log(quizQuestionsList);\r\n  //     }\r\n  // },[quizQuestionsList])\r\n  // useEffect(() => {\r\n\r\n  // }, [currentQuestionCount])\r\n\r\n  const handleAnswerChange = (answer) => {\r\n    setUserAnswers((prevAnswers) => ({\r\n      ...prevAnswers,\r\n      [currentQuestionCount]: answer,\r\n    }));\r\n  };\r\n\r\n  //Save user answer(doesnt work yet) and moves to next question\r\n  const handleNextQuestion = () => {\r\n    handleAnswerChange(currentQuestionCount, userAnswers);\r\n    setCurrentQuestionCount((prevIndex) => prevIndex + 1);\r\n  };\r\n\r\n  //Save user answer(doesnt work yet) and moves to previous question\r\n  const handlePreviousQuestion = () => {\r\n    handleAnswerChange(currentQuestionCount, userAnswers);\r\n    setCurrentQuestionCount((prevIndex) => prevIndex - 1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"QuizQuestions-container\">\r\n      {quizQuestionsList.length === 0 ? (\r\n        <div>Loading...</div>\r\n      ) : submitted ? (<QuizResults allUserAns={allUserAns} quizQuestionsList={quizQuestionsList} />) :\r\n        (\r\n          <>\r\n            <h2>Quiz: {quizData.quizName}</h2>\r\n            <QuizSideBar allUserAns={allUserAns} setCurrentQuestionCount={setCurrentQuestionCount} currentQuestionCount={currentQuestionCount} />\r\n            {quizQuestionsList[currentQuestionCount].questionType === 'multipleChoice' ? (\r\n              <MultipleChoice\r\n                question={quizQuestionsList[currentQuestionCount]}\r\n                onAnswerChange={handleAnswerChange}\r\n                setAllUserAns={setAllUserAns}\r\n                allUserAns={allUserAns}\r\n                currentQuestionIndex={currentQuestionCount}\r\n              />\r\n            ) : (\r\n              <WrittenChoice\r\n                question={quizQuestionsList[currentQuestionCount]}\r\n                currentQuestionIndex={currentQuestionCount}\r\n                onAnswerChange={handleAnswerChange}\r\n                setAllUserAns={setAllUserAns}\r\n                allUserAns={allUserAns}\r\n                userAnswer={allUserAns[currentQuestionCount] || ''}\r\n                setCurrentQuestionCount={setCurrentQuestionCount}\r\n              />\r\n            )}\r\n\r\n            <div className=\"question-navigation\">\r\n              <button onClick={handlePreviousQuestion} disabled={currentQuestionCount === 0}>\r\n                Previous Question\r\n              </button>\r\n              {currentQuestionCount === quizQuestionsList.length - 1 ? (\r\n                <button onClick={() => setSubmitted(true)}>Submit Quiz</button>\r\n              ) : (\r\n                <button onClick={handleNextQuestion}>Next Question</button>\r\n              )}\r\n            </div>\r\n          </>\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizQuestions;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}