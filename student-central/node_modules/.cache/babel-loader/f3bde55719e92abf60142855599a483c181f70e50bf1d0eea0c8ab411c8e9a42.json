{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ninay\\\\Documents\\\\capstone-499\\\\Student-Central\\\\student-central\\\\src\\\\components\\\\TodoPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Sidebar from './Sidebar';\nimport NoteSection from './NoteSection';\nimport '../styles/TodoPage.css';\nimport userEvent from '@testing-library/user-event';\nimport NoteList from './NoteList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoPage = () => {\n  _s();\n  const [selectedFolder, setSelectedFolder] = useState(null);\n  const [selectedNote, setSelectedNote] = useState(null);\n  const [folderNotes, setFolderNotes] = useState({});\n  const [mounted, setMounted] = useState(false);\n  console.log('folderNotes', folderNotes);\n\n  // Function to create new folder, uses spread operator to create copy\n  const handleAddFolder = folderName => {\n    setFolderNotes(prevNotes => ({\n      ...prevNotes,\n      // creates empty array\n      [folderName]: []\n    }));\n  };\n\n  // Function to add note object to folder\n  const handleAddNoteToFolder = (folderName, note) => {\n    // Spread operator to create copy\n    setFolderNotes(prevNotes => ({\n      ...prevNotes,\n      // Combine previous notes array with new notes object \n      [folderName]: [...(prevNotes[folderName] || []), note]\n    }));\n  };\n  useEffect(() => {\n    const saveFolders = () => {\n      try {\n        console.log(\"SAVETODATABASE\", JSON.stringify(folderNotes));\n        fetch('http://localhost:4000/api/schedule/save-folders', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(folderNotes),\n          credentials: 'include'\n        });\n      } catch (error) {\n        console.log(\"error saveFolders\", error);\n      }\n    };\n    if (mounted) {\n      saveFolders();\n    }\n    //if mounting for the first time, dont save\n    else {\n      setMounted(true);\n    }\n  }, [folderNotes]);\n  useEffect(() => {\n    const getFolders = () => {\n      try {\n        return fetch('http://localhost:4000/api/schedule/my-folders', {\n          method: 'GET',\n          credentials: 'include'\n        }).then(res => res.json()).then(data => setFolderNotes(data));\n      } catch (error) {\n        console.log(\"error getFolders\", error);\n      }\n    };\n    getFolders();\n  }, []);\n\n  // Function to update note\n  const handleNoteChange = (noteTitle, noteContent) => {\n    // condition to see if a note is selected\n    if (selectedNote) {\n      // Takes current note properties and updates title and content\n      const updatedNote = {\n        ...selectedNote,\n        title: noteTitle,\n        content: noteContent\n      };\n      setSelectedNote(updatedNote);\n      // Callback to update the folder the note is in. Creates a copy\n      setFolderNotes(prevNotes => ({\n        ...prevNotes,\n        //Iterates the array to find the note in the folder and update it.\n        [selectedFolder]: prevNotes[selectedFolder].map(note =>\n        // Check if the current note is the same as the selectedNote\n        note === selectedNote ? updatedNote : note)\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo-page\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar\n    //Pass down props from Sidebar.js\n    , {\n      setSelectedFolder: setSelectedFolder,\n      folders: Object.keys(folderNotes),\n      onAddFolder: handleAddFolder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NoteList, {\n      folderNotes: folderNotes,\n      selectedFolder: selectedFolder,\n      selectedNote: selectedNote,\n      setSelectedNote: setSelectedNote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NoteSection\n    // Pass down props from NoteSection.js\n    , {\n      selectedFolder: selectedFolder,\n      selectedNote: selectedNote,\n      setSelectedNote: setSelectedNote,\n      onAddNoteToFolder: handleAddNoteToFolder,\n      onNoteChange: handleNoteChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoPage, \"UR4xYFN/9J+QGUXA17iFLDUnOTo=\");\n_c = TodoPage;\nexport default TodoPage;\nvar _c;\n$RefreshReg$(_c, \"TodoPage\");","map":{"version":3,"names":["React","useEffect","useState","Sidebar","NoteSection","userEvent","NoteList","jsxDEV","_jsxDEV","TodoPage","_s","selectedFolder","setSelectedFolder","selectedNote","setSelectedNote","folderNotes","setFolderNotes","mounted","setMounted","console","log","handleAddFolder","folderName","prevNotes","handleAddNoteToFolder","note","saveFolders","JSON","stringify","fetch","method","headers","body","credentials","error","getFolders","then","res","json","data","handleNoteChange","noteTitle","noteContent","updatedNote","title","content","map","className","children","folders","Object","keys","onAddFolder","fileName","_jsxFileName","lineNumber","columnNumber","onAddNoteToFolder","onNoteChange","_c","$RefreshReg$"],"sources":["C:/Users/ninay/Documents/capstone-499/Student-Central/student-central/src/components/TodoPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Sidebar from './Sidebar';\r\nimport NoteSection from './NoteSection';\r\nimport '../styles/TodoPage.css';\r\nimport userEvent from '@testing-library/user-event';\r\nimport NoteList from './NoteList';\r\n\r\nconst TodoPage = () => {\r\n  const [selectedFolder, setSelectedFolder] = useState(null);\r\n  const [selectedNote, setSelectedNote] = useState(null);\r\n  const [folderNotes, setFolderNotes] = useState({});\r\n\r\n  const [mounted, setMounted] = useState(false);\r\n\r\n  console.log('folderNotes', folderNotes);\r\n\r\n  // Function to create new folder, uses spread operator to create copy\r\n  const handleAddFolder = (folderName) => {\r\n    setFolderNotes((prevNotes) => ({\r\n      ...prevNotes,\r\n      // creates empty array\r\n      [folderName]: [],\r\n    }));\r\n  };\r\n\r\n  // Function to add note object to folder\r\n  const handleAddNoteToFolder = (folderName, note) => {\r\n    // Spread operator to create copy\r\n    setFolderNotes((prevNotes) => ({\r\n      ...prevNotes,\r\n      // Combine previous notes array with new notes object \r\n      [folderName]: [...(prevNotes[folderName] || []), note],\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const saveFolders = () => {\r\n      try{\r\n        console.log(\"SAVETODATABASE\", JSON.stringify(folderNotes));\r\n            fetch('http://localhost:4000/api/schedule/save-folders', {\r\n            method:'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(folderNotes),\r\n            credentials: 'include'\r\n        })\r\n      } catch (error) {\r\n          console.log(\"error saveFolders\", error);\r\n      }\r\n\r\n    }\r\n    if(mounted){\r\n      saveFolders();\r\n    }\r\n    //if mounting for the first time, dont save\r\n    else{\r\n      setMounted(true);\r\n    }\r\n    \r\n  }, [folderNotes])\r\n\r\n  useEffect(() => {\r\n    const getFolders = () => {\r\n      try{\r\n        return fetch('http://localhost:4000/api/schedule/my-folders', {\r\n            method:'GET',\r\n            credentials: 'include'\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => setFolderNotes(data));\r\n      } catch (error) {\r\n          console.log(\"error getFolders\", error);\r\n      }\r\n    }\r\n\r\n    getFolders();\r\n  }, [])\r\n\r\n  // Function to update note\r\n  const handleNoteChange = (noteTitle, noteContent) => {\r\n    // condition to see if a note is selected\r\n    if (selectedNote) {\r\n      // Takes current note properties and updates title and content\r\n      const updatedNote = { ...selectedNote, title: noteTitle, content: noteContent };\r\n      setSelectedNote(updatedNote);\r\n      // Callback to update the folder the note is in. Creates a copy\r\n      setFolderNotes((prevNotes) => ({\r\n        ...prevNotes,\r\n        //Iterates the array to find the note in the folder and update it.\r\n        [selectedFolder]: prevNotes[selectedFolder].map((note) =>\r\n          // Check if the current note is the same as the selectedNote\r\n          note === selectedNote ? updatedNote : note\r\n        ),\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo-page\">\r\n      <Sidebar\r\n        //Pass down props from Sidebar.js\r\n        setSelectedFolder={setSelectedFolder}\r\n        folders={Object.keys(folderNotes)}\r\n        onAddFolder={handleAddFolder}\r\n      />\r\n\r\n      <NoteList\r\n        folderNotes={folderNotes}\r\n        selectedFolder={selectedFolder}\r\n        selectedNote={selectedNote}\r\n        setSelectedNote={setSelectedNote}  \r\n      />\r\n\r\n      <NoteSection\r\n        // Pass down props from NoteSection.js\r\n        selectedFolder={selectedFolder}\r\n        selectedNote={selectedNote}\r\n        setSelectedNote={setSelectedNote}\r\n        onAddNoteToFolder={handleAddNoteToFolder}\r\n        onNoteChange={handleNoteChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAO,wBAAwB;AAC/B,OAAOC,SAAS,MAAM,6BAA6B;AACnD,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC;EAElD,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAE7CiB,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEL,WAAW,CAAC;;EAEvC;EACA,MAAMM,eAAe,GAAIC,UAAU,IAAK;IACtCN,cAAc,CAAEO,SAAS,KAAM;MAC7B,GAAGA,SAAS;MACZ;MACA,CAACD,UAAU,GAAG;IAChB,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAME,qBAAqB,GAAGA,CAACF,UAAU,EAAEG,IAAI,KAAK;IAClD;IACAT,cAAc,CAAEO,SAAS,KAAM;MAC7B,GAAGA,SAAS;MACZ;MACA,CAACD,UAAU,GAAG,CAAC,IAAIC,SAAS,CAACD,UAAU,CAAC,IAAI,EAAE,CAAC,EAAEG,IAAI;IACvD,CAAC,CAAC,CAAC;EACL,CAAC;EAEDxB,SAAS,CAAC,MAAM;IACd,MAAMyB,WAAW,GAAGA,CAAA,KAAM;MACxB,IAAG;QACDP,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEO,IAAI,CAACC,SAAS,CAACb,WAAW,CAAC,CAAC;QACtDc,KAAK,CAAC,iDAAiD,EAAE;UACzDC,MAAM,EAAC,MAAM;UACbC,OAAO,EAAE;YACL,cAAc,EAAE;UACpB,CAAC;UACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAACb,WAAW,CAAC;UACjCkB,WAAW,EAAE;QACjB,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZf,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEc,KAAK,CAAC;MAC3C;IAEF,CAAC;IACD,IAAGjB,OAAO,EAAC;MACTS,WAAW,CAAC,CAAC;IACf;IACA;IAAA,KACI;MACFR,UAAU,CAAC,IAAI,CAAC;IAClB;EAEF,CAAC,EAAE,CAACH,WAAW,CAAC,CAAC;EAEjBd,SAAS,CAAC,MAAM;IACd,MAAMkC,UAAU,GAAGA,CAAA,KAAM;MACvB,IAAG;QACD,OAAON,KAAK,CAAC,+CAA+C,EAAE;UAC1DC,MAAM,EAAC,KAAK;UACZG,WAAW,EAAE;QACjB,CAAC,CAAC,CACDG,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAIvB,cAAc,CAACuB,IAAI,CAAC,CAAC;MACrC,CAAC,CAAC,OAAOL,KAAK,EAAE;QACZf,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEc,KAAK,CAAC;MAC1C;IACF,CAAC;IAEDC,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMK,gBAAgB,GAAGA,CAACC,SAAS,EAAEC,WAAW,KAAK;IACnD;IACA,IAAI7B,YAAY,EAAE;MAChB;MACA,MAAM8B,WAAW,GAAG;QAAE,GAAG9B,YAAY;QAAE+B,KAAK,EAAEH,SAAS;QAAEI,OAAO,EAAEH;MAAY,CAAC;MAC/E5B,eAAe,CAAC6B,WAAW,CAAC;MAC5B;MACA3B,cAAc,CAAEO,SAAS,KAAM;QAC7B,GAAGA,SAAS;QACZ;QACA,CAACZ,cAAc,GAAGY,SAAS,CAACZ,cAAc,CAAC,CAACmC,GAAG,CAAErB,IAAI;QACnD;QACAA,IAAI,KAAKZ,YAAY,GAAG8B,WAAW,GAAGlB,IACxC;MACF,CAAC,CAAC,CAAC;IACL;EACF,CAAC;EAED,oBACEjB,OAAA;IAAKuC,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBxC,OAAA,CAACL;IACC;IAAA;MACAS,iBAAiB,EAAEA,iBAAkB;MACrCqC,OAAO,EAAEC,MAAM,CAACC,IAAI,CAACpC,WAAW,CAAE;MAClCqC,WAAW,EAAE/B;IAAgB;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,eAEFhD,OAAA,CAACF,QAAQ;MACPS,WAAW,EAAEA,WAAY;MACzBJ,cAAc,EAAEA,cAAe;MAC/BE,YAAY,EAAEA,YAAa;MAC3BC,eAAe,EAAEA;IAAgB;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,eAEFhD,OAAA,CAACJ;IACC;IAAA;MACAO,cAAc,EAAEA,cAAe;MAC/BE,YAAY,EAAEA,YAAa;MAC3BC,eAAe,EAAEA,eAAgB;MACjC2C,iBAAiB,EAAEjC,qBAAsB;MACzCkC,YAAY,EAAElB;IAAiB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC9C,EAAA,CArHID,QAAQ;AAAAkD,EAAA,GAARlD,QAAQ;AAuHd,eAAeA,QAAQ;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}