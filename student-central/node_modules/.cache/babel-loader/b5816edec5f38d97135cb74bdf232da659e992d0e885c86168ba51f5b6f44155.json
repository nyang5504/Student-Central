{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mohamed Barrie\\\\Documents\\\\Project\\\\Student-Central\\\\student-central\\\\src\\\\components\\\\todo-page\\\\TodoPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Sidebar from './Sidebar';\nimport NoteSection from './NoteSection';\nimport NoteList from './NoteList';\nimport '../../styles/todo-page/TodoPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoPage = () => {\n  _s();\n  const [selectedFolder, setSelectedFolder] = useState(null);\n  const [selectedNote, setSelectedNote] = useState(null);\n  const [folderNotes, setFolderNotes] = useState({});\n  const [isFolderDeleted, setIsFolderDeleted] = useState(false);\n  const [mounted, setMounted] = useState(false);\n  const navigate = useNavigate();\n  console.log(folderNotes);\n  // Function to create new folder, uses spread operator to create copy\n  const handleAddFolder = folderName => {\n    setFolderNotes(prevNotes => ({\n      ...prevNotes,\n      // creates empty array\n      [folderName]: []\n    }));\n  };\n\n  // Function to add note object to folder\n  const handleAddNoteToFolder = (folderName, note) => {\n    // Spread operator to create copy\n    setFolderNotes(prevNotes => ({\n      ...prevNotes,\n      // Combine previous notes array with new notes object \n      [folderName]: [...(prevNotes[folderName] || []), note]\n    }));\n  };\n\n  // Function to delete a note\n  const deleteNote = (folderName, noteToDelete) => {\n    setFolderNotes(prevNotes => ({\n      ...prevNotes,\n      // Find the note in the folder using filter\n      [folderName]: prevNotes[folderName].filter(note => note !== noteToDelete)\n    }));\n  };\n\n  // Function to delete a folder and it's notes\n  const deleteFolder = folderName => {\n    // Remove the folder and its notes\n    setFolderNotes(prevNotes => {\n      const updatedNotes = {\n        ...prevNotes\n      };\n      delete updatedNotes[folderName];\n      setSelectedNote(null);\n      //Render the new folders in the Sidebar\n      return updatedNotes;\n    });\n\n    // Reset the selected folder and note if they were deleted\n    if (selectedFolder === folderName) {\n      setSelectedFolder(null);\n      setSelectedNote(null);\n      setIsFolderDeleted(true);\n    }\n  };\n  useEffect(() => {\n    const saveFolders = () => {\n      try {\n        console.log(\"SAVETODATABASE\", JSON.stringify(folderNotes));\n        fetch('http://localhost:4000/api/schedule/save-folders', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(folderNotes),\n          credentials: 'include'\n        });\n      } catch (error) {\n        console.log(\"error saveFolders\", error);\n      }\n    };\n    if (mounted) {\n      saveFolders();\n    }\n    //if mounting for the first time, dont save\n    else {\n      setMounted(true);\n    }\n  }, [folderNotes]);\n  useEffect(() => {\n    const getFolders = async () => {\n      try {\n        const response = await fetch('http://localhost:4000/api/schedule/my-folders', {\n          method: 'GET',\n          credentials: 'include'\n        });\n        if (response.status === 401) {\n          navigate('/login');\n          return;\n        }\n        if (response.ok) {\n          const data = await response.json();\n          setFolderNotes(data);\n        } else {\n          console.error('Error fetching folders:', response.status);\n        }\n      } catch (error) {\n        console.error('Error fetching folders:', error);\n      }\n    };\n    getFolders();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-content\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar\n      //Pass down props from Sidebar.js\n      , {\n        setSelectedFolder: setSelectedFolder,\n        folders: Object.keys(folderNotes),\n        onAddFolder: handleAddFolder,\n        onDeleteFolder: deleteFolder,\n        selectedFolder: selectedFolder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(NoteList\n      // Pass down props to NotesList.js\n      , {\n        selectedFolder: selectedFolder,\n        folderNotes: folderNotes,\n        selectedNote: selectedNote,\n        setSelectedNote: setSelectedNote,\n        onAddNoteToFolder: handleAddNoteToFolder,\n        setFolderNotes: setFolderNotes,\n        onDeleteNote: deleteNote,\n        isFolderDeleted: isFolderDeleted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(NoteSection\n      // Pass down props from NoteSection.js\n      , {\n        selectedFolder: selectedFolder,\n        selectedNote: selectedNote,\n        folderNotes: folderNotes,\n        setSelectedNote: setSelectedNote,\n        setFolderNotes: setFolderNotes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 3\n  }, this);\n};\n_s(TodoPage, \"sjCUsGtb248FkZQj3mV3/xRza8U=\", false, function () {\n  return [useNavigate];\n});\n_c = TodoPage;\nexport default TodoPage;\nvar _c;\n$RefreshReg$(_c, \"TodoPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Sidebar","NoteSection","NoteList","jsxDEV","_jsxDEV","TodoPage","_s","selectedFolder","setSelectedFolder","selectedNote","setSelectedNote","folderNotes","setFolderNotes","isFolderDeleted","setIsFolderDeleted","mounted","setMounted","navigate","console","log","handleAddFolder","folderName","prevNotes","handleAddNoteToFolder","note","deleteNote","noteToDelete","filter","deleteFolder","updatedNotes","saveFolders","JSON","stringify","fetch","method","headers","body","credentials","error","getFolders","response","status","ok","data","json","className","children","folders","Object","keys","onAddFolder","onDeleteFolder","fileName","_jsxFileName","lineNumber","columnNumber","onAddNoteToFolder","onDeleteNote","_c","$RefreshReg$"],"sources":["C:/Users/Mohamed Barrie/Documents/Project/Student-Central/student-central/src/components/todo-page/TodoPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Sidebar from './Sidebar';\r\nimport NoteSection from './NoteSection';\r\nimport NoteList from './NoteList';\r\nimport '../../styles/todo-page/TodoPage.css';\r\n\r\nconst TodoPage = () => {\r\n  const [selectedFolder, setSelectedFolder] = useState(null);\r\n  const [selectedNote, setSelectedNote] = useState(null);\r\n  const [folderNotes, setFolderNotes] = useState({});\r\n\r\n  const [isFolderDeleted, setIsFolderDeleted] = useState(false);\r\n\r\n  const [mounted, setMounted] = useState(false);\r\n  const navigate = useNavigate();\r\n  console.log(folderNotes);\r\n  // Function to create new folder, uses spread operator to create copy\r\n  const handleAddFolder = (folderName) => {\r\n    setFolderNotes((prevNotes) => ({\r\n      ...prevNotes,\r\n      // creates empty array\r\n      [folderName]: [],\r\n    }));\r\n  };\r\n\r\n\r\n  // Function to add note object to folder\r\n  const handleAddNoteToFolder = (folderName, note) => {\r\n    // Spread operator to create copy\r\n    setFolderNotes((prevNotes) => ({\r\n      ...prevNotes,\r\n      // Combine previous notes array with new notes object \r\n      [folderName]: [...(prevNotes[folderName] || []), note],\r\n    }));\r\n  };\r\n\r\n  // Function to delete a note\r\n  const deleteNote = (folderName, noteToDelete) => {\r\n    setFolderNotes((prevNotes) => ({\r\n      ...prevNotes,\r\n      // Find the note in the folder using filter\r\n      [folderName]: prevNotes[folderName].filter((note) => note !== noteToDelete),\r\n    }));\r\n  };\r\n\r\n  // Function to delete a folder and it's notes\r\nconst deleteFolder = (folderName) => {\r\n  // Remove the folder and its notes\r\n  setFolderNotes((prevNotes) => {\r\n    const updatedNotes = { ...prevNotes };\r\n    delete updatedNotes[folderName];\r\n    setSelectedNote(null);\r\n    //Render the new folders in the Sidebar\r\n    return updatedNotes;\r\n  });\r\n\r\n  // Reset the selected folder and note if they were deleted\r\n  if (selectedFolder === folderName) {\r\n    setSelectedFolder(null);\r\n    setSelectedNote(null);\r\n    setIsFolderDeleted(true);\r\n  }\r\n};\r\n\r\nuseEffect(() => {\r\n  const saveFolders = () => {\r\n    try{\r\n      console.log(\"SAVETODATABASE\", JSON.stringify(folderNotes));\r\n          fetch('http://localhost:4000/api/schedule/save-folders', {\r\n          method:'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(folderNotes),\r\n          credentials: 'include'\r\n      })\r\n    } catch (error) {\r\n        console.log(\"error saveFolders\", error);\r\n    }\r\n\r\n  }\r\n  if(mounted){\r\n    saveFolders();\r\n  }\r\n  //if mounting for the first time, dont save\r\n  else{\r\n    setMounted(true);\r\n  }\r\n  \r\n}, [folderNotes])\r\n\r\nuseEffect(() => {\r\n  const getFolders = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:4000/api/schedule/my-folders', {\r\n        method: 'GET',\r\n        credentials: 'include',\r\n      });\r\n\r\n      if (response.status === 401) {\r\n        navigate('/login');\r\n        return;\r\n      }\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setFolderNotes(data);\r\n      } else {\r\n        console.error('Error fetching folders:', response.status);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching folders:', error);\r\n    }\r\n  };\r\n\r\n  getFolders();\r\n}, []);\r\n\r\nreturn (\r\n  <div className=\"todo-page\">\r\n    <div className=\"todo-content\">\r\n      <Sidebar\r\n        //Pass down props from Sidebar.js\r\n        setSelectedFolder={setSelectedFolder}\r\n        folders={Object.keys(folderNotes)}\r\n        onAddFolder={handleAddFolder}\r\n        onDeleteFolder={deleteFolder}\r\n        selectedFolder={selectedFolder}\r\n      />\r\n      <NoteList\r\n        // Pass down props to NotesList.js\r\n        selectedFolder={selectedFolder}\r\n        folderNotes={folderNotes}\r\n        selectedNote={selectedNote}\r\n        setSelectedNote={setSelectedNote}\r\n        onAddNoteToFolder={handleAddNoteToFolder}\r\n        setFolderNotes={setFolderNotes}\r\n        onDeleteNote={deleteNote}\r\n        isFolderDeleted={isFolderDeleted}\r\n      />\r\n      <NoteSection\r\n        // Pass down props from NoteSection.js\r\n        selectedFolder={selectedFolder}\r\n        selectedNote={selectedNote}\r\n        folderNotes={folderNotes}\r\n        setSelectedNote={setSelectedNote}\r\n        setFolderNotes={setFolderNotes}\r\n      />\r\n    </div>\r\n  </div>\r\n);\r\n};\r\n\r\nexport default TodoPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}