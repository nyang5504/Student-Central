{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ninay\\\\Documents\\\\capstone-499\\\\Student-Central\\\\student-central\\\\src\\\\components\\\\NoteSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteSection = _ref => {\n  _s();\n  let {\n    selectedFolder,\n    selectedNote,\n    setSelectedNote,\n    onAddNoteToFolder\n  } = _ref;\n  const [noteContent, setNoteContent] = useState('');\n  const [noteTitle, setNoteTitle] = useState('');\n\n  // Use effect to update Reactquill to show saved note content and title\n  useEffect(() => {\n    if (selectedNote) {\n      setNoteTitle(selectedNote.title);\n      setNoteContent(selectedNote.content);\n    } else {\n      setNoteTitle('');\n      setNoteContent('');\n    }\n  }, [selectedNote]);\n\n  // Use effect to show empty text box when a folder is selected\n  useEffect(() => {\n    if (selectedFolder) {\n      setNoteTitle('');\n      setNoteContent('');\n      setSelectedNote(null);\n    }\n  }, [selectedFolder]);\n\n  // Passed down prop to update react quill \n  const handleNoteChange = content => {\n    setNoteContent(content);\n  };\n\n  // Creates a new note object and saves it in a folder\n  const handleSaveNote = () => {\n    // Conditon to check if title and content is empty\n    if (selectedFolder && noteTitle.trim() !== '' && noteContent.trim() !== '') {\n      const newNote = {\n        title: noteTitle,\n        content: noteContent\n      };\n      onAddNoteToFolder(selectedFolder, newNote);\n      setSelectedNote(newNote);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note-section\",\n    children: selectedFolder ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: noteTitle,\n        onChange: e => setNoteTitle(e.target.value),\n        placeholder: \"Note Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ReactQuill, {\n        value: noteContent,\n        onChange: handleNoteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSaveNote,\n        children: \"Save Note\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No folder selected.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteSection, \"FsNeG6q+zEf4hCAXhSiVqrQpyC8=\");\n_c = NoteSection;\nexport default NoteSection;\nvar _c;\n$RefreshReg$(_c, \"NoteSection\");","map":{"version":3,"names":["React","useState","useEffect","ReactQuill","jsxDEV","_jsxDEV","NoteSection","_ref","_s","selectedFolder","selectedNote","setSelectedNote","onAddNoteToFolder","noteContent","setNoteContent","noteTitle","setNoteTitle","title","content","handleNoteChange","handleSaveNote","trim","newNote","className","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ninay/Documents/capstone-499/Student-Central/student-central/src/components/NoteSection.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\n\r\nconst NoteSection = ({ selectedFolder, selectedNote, setSelectedNote, onAddNoteToFolder }) => {\r\n  const [noteContent, setNoteContent] = useState('');\r\n  const [noteTitle, setNoteTitle] = useState('');\r\n\r\n  // Use effect to update Reactquill to show saved note content and title\r\n  useEffect(() => {\r\n    if (selectedNote) {\r\n      setNoteTitle(selectedNote.title);\r\n      setNoteContent(selectedNote.content);\r\n    } else {\r\n      setNoteTitle('');\r\n      setNoteContent('');\r\n    }\r\n  }, [selectedNote]);\r\n\r\n  // Use effect to show empty text box when a folder is selected\r\n  useEffect(() => {\r\n    if (selectedFolder) {\r\n      setNoteTitle('');\r\n      setNoteContent('');\r\n      setSelectedNote(null);\r\n    }\r\n  }, [selectedFolder]);\r\n\r\n  // Passed down prop to update react quill \r\n  const handleNoteChange = (content) => {\r\n    setNoteContent(content);\r\n  };\r\n\r\n  // Creates a new note object and saves it in a folder\r\n  const handleSaveNote = () => {\r\n    // Conditon to check if title and content is empty\r\n    if (selectedFolder && noteTitle.trim() !== '' && noteContent.trim() !== '') {\r\n      const newNote = {\r\n        title: noteTitle,\r\n        content: noteContent,\r\n      };\r\n      onAddNoteToFolder(selectedFolder, newNote);\r\n      setSelectedNote(newNote);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"note-section\">\r\n      {/* Condition to check if there's a selected folder*/}\r\n      {selectedFolder ? (\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            value={noteTitle}\r\n            onChange={(e) => setNoteTitle(e.target.value)}\r\n            placeholder=\"Note Title\"\r\n          />\r\n          <ReactQuill value={noteContent} onChange={handleNoteChange} />\r\n          <button onClick={handleSaveNote}>Save Note</button>\r\n        </div>\r\n      ) : (\r\n        <p>No folder selected.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteSection;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}