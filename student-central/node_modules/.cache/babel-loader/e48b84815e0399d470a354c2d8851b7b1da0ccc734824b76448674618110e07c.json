{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mohamed Barrie\\\\Documents\\\\Project\\\\Student-Central\\\\student-central\\\\src\\\\components\\\\quiz-page\\\\QuizQuestions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport '../../styles/quiz-page/QuizQuestions.css';\n// import \"../components/SavedQuizCard\"\n// import QuizSideBar from './QuizSidebar';\nimport MultipleChoice from './MultipleChoice';\nimport WrittenChoice from './WrittenChoice';\nimport QuizResults from './QuizResults';\nimport QuizSideBar from './QuizSidebar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QuizQuestions = () => {\n  _s();\n  const location = useLocation();\n  const prevLocation = location.state.prevPath;\n  const quizCreator = location.state.creator;\n  console.log(\"prevLocation\", location.state.prevPath);\n  console.log(\"creator\", location.state.creator);\n\n  //get query param\n  const params = new URLSearchParams(useLocation().search);\n  const quizType = params.get('type');\n  //get quiz name from param\n  const {\n    quizName\n  } = useParams();\n  const [quizData, setQuizData] = useState({\n    quizName: '',\n    questions: [{\n      term: '',\n      definition: ''\n    }]\n  });\n  const [currentQuestionCount, setCurrentQuestionCount] = useState(0);\n  const [quizQuestionsList, setQuizQuestionsList] = useState([]);\n  const [allUserAns, setAllUserAns] = useState([]);\n  const [submitted, setSubmitted] = useState(false);\n\n  //helper function that returns a random type, either written or multiple choice\n  const getRandomType = () => {\n    //if quiz type was both, then we choose a type randomly\n    if (quizType == \"both\") {\n      let randomNum = Math.floor(Math.random() * 10) + 1;\n      if (randomNum % 2 == 0) {\n        return \"multipleChoice\";\n      } else {\n        return \"written\";\n      }\n    } else {\n      //if quiz type was not both, we use that quiz type for the question type\n      return quizType;\n    }\n  };\n\n  //helper function to shuffle the order of questions, so that each time user takes quiz, the order is different\n  const createQuestionOrder = defs => {\n    const questionOrder = [];\n    for (let i = 0; i < defs.length; i++) {\n      questionOrder.push(i);\n    }\n    shuffleArr(questionOrder);\n    return questionOrder;\n  };\n\n  //shuffles any array you give it\n  const shuffleArr = arr => {\n    //starting from the last element, choose an random element before it two swap with\n    for (let i = arr.length - 1; i > 0; i--) {\n      let numToSwap = Math.floor(Math.random() * (i + 1));\n      let temp = arr[i];\n      arr[i] = arr[numToSwap];\n      arr[numToSwap] = temp;\n    }\n  };\n\n  //given an answer and a list of all definitions within the quiz, create a 4 element array containing choices for a single question\n  const createMCChoices = (answer, defs) => {\n    //create a copy of the list of defintions, excluding the answer\n    const firstIdx = defs.findIndex(x => x === answer);\n    const defsCopy = defs.filter((def, index) => index != firstIdx);\n    //empty array to store choices\n    const arrMC = [];\n    //get a random number to decide where the answer will appear within the array of choices\n    let randomNum = Math.floor(Math.random() * 4);\n    //loop 4 times to fill up arrMC\n    for (let i = 0; i < 4; i++) {\n      //if this is not the index where the answer will be, randomly select a definition from the list of all definitions and place it in arrMC.\n      if (i != randomNum) {\n        let randomDefIdx = Math.floor(Math.random() * defsCopy.length);\n        arrMC.push(defsCopy[randomDefIdx]);\n        //remove chosen definition from the definitions array so it doesn't get chosen again\n        defsCopy.splice(randomDefIdx, 1);\n      } else {\n        arrMC.push(answer);\n      }\n    }\n    return arrMC;\n  };\n  const quizSetup = (quizdata, defs) => {\n    //first get the question ordering\n    const qORder = createQuestionOrder(defs);\n    const entireQuiz = [];\n    for (let i = 0; i < qORder.length; i++) {\n      const questionInfo = {};\n      questionInfo.questionType = getRandomType();\n      questionInfo.term = quizdata.questions[qORder[i]].term;\n      const ans = quizdata.questions[qORder[i]].definition;\n      // console.log(\"questionType\", questionInfo.questionType);\n\n      //the object will only have choices if it is a multiple choice question\n      if (questionInfo.questionType === \"multipleChoice\") {\n        questionInfo.choices = createMCChoices(ans, defs);\n      }\n      questionInfo.answer = ans;\n\n      // console.log(\"questionInfo\", questionInfo);\n      entireQuiz.push(questionInfo);\n      // console.log(\"entireQuiz\", entireQuiz);\n    }\n    //update useState variable\n    setQuizQuestionsList(entireQuiz);\n\n    //this is used to track user answers. It starts with no user answer\n    const emptyAns = [];\n    for (let i = 0; i < entireQuiz.length; i++) {\n      emptyAns.push(\"\");\n    }\n    setAllUserAns(emptyAns);\n  };\n\n  //useEffect to get quiz data for quiz clicked on earlier\n  useEffect(() => {\n    const fetchQuizData = async () => {\n      try {\n        const response = await fetch(`http://localhost:4000/api/quiz/get-one-quiz/${quizName}`, {\n          method: 'GET',\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch quiz data.');\n        }\n        const data = await response.json();\n        const quizData = {\n          quizName: quizName,\n          // map out questions from database. Empty string is default\n          questions: data.questions.map(question => ({\n            term: question.term || '',\n            definition: question.definition || ''\n          }))\n        };\n        // Update the state with the retrieved data\n        console.log(\"quizData\", quizData);\n        setQuizData(quizData);\n      } catch (error) {\n        console.log('Error fetching quiz data.', error);\n      }\n    };\n    const fetchQuizDataSearch = async creator => {\n      try {\n        const response = await fetch(`http://localhost:4000/api/quiz/one-quiz-from-all/${quizName}/${creator}`, {\n          method: 'GET',\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch quiz data.');\n        }\n        const data = await response.json();\n        const quizData = {\n          quizName: quizName,\n          questions: data.map(question => ({\n            term: question.term || '',\n            definition: question.definition || ''\n          }))\n        };\n        setQuizData(quizData);\n      } catch (error) {\n        console.log('Error fetching quiz data.', error);\n      }\n    };\n    if (!quizCreator) {\n      fetchQuizData();\n    } else {\n      fetchQuizDataSearch(quizCreator);\n    }\n  }, []);\n\n  //once quiz data is fetched, we can organize that information to prepare for quiz taking\n  useEffect(() => {\n    const alldefinitions = quizData.questions.map(question => question.definition);\n    console.log(\"alldefinitions\", alldefinitions);\n    quizSetup(quizData, alldefinitions);\n  }, [quizData]);\n\n  //Save user answer and moves to next question\n  const handleNextQuestion = () => {\n    setCurrentQuestionCount(prevIndex => prevIndex + 1);\n  };\n\n  //Save user answer and moves to previous question\n  const handlePreviousQuestion = () => {\n    setCurrentQuestionCount(prevIndex => prevIndex - 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"QuizQuestions-container\",\n    children: quizQuestionsList.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }, this) : submitted ? /*#__PURE__*/_jsxDEV(QuizResults, {\n      allUserAns: allUserAns,\n      quizQuestionsList: quizQuestionsList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(QuizSideBar, {\n        allUserAns: allUserAns,\n        setCurrentQuestionCount: setCurrentQuestionCount,\n        currentQuestionCount: currentQuestionCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }, this), quizQuestionsList[currentQuestionCount].questionType === 'multipleChoice' ? /*#__PURE__*/_jsxDEV(MultipleChoice, {\n        question: quizQuestionsList[currentQuestionCount],\n        setAllUserAns: setAllUserAns,\n        allUserAns: allUserAns,\n        currentQuestionIndex: currentQuestionCount,\n        handleNextQuestion: handleNextQuestion,\n        handlePreviousQuestion: handlePreviousQuestion,\n        setSubmitted: setSubmitted,\n        quizQuestionsList: quizQuestionsList,\n        currentQuestionCount: currentQuestionCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(WrittenChoice, {\n        question: quizQuestionsList[currentQuestionCount],\n        currentQuestionIndex: currentQuestionCount,\n        setAllUserAns: setAllUserAns,\n        allUserAns: allUserAns,\n        userAnswer: allUserAns[currentQuestionCount] || '',\n        setCurrentQuestionCount: setCurrentQuestionCount,\n        handleNextQuestion: handleNextQuestion,\n        handlePreviousQuestion: handlePreviousQuestion,\n        setSubmitted: setSubmitted,\n        quizQuestionsList: quizQuestionsList,\n        currentQuestionCount: currentQuestionCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizQuestions, \"XAy2YaEdAcwQaOq7hl4NELqARIQ=\", false, function () {\n  return [useLocation, useLocation, useParams];\n});\n_c = QuizQuestions;\nexport default QuizQuestions;\nvar _c;\n$RefreshReg$(_c, \"QuizQuestions\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useParams","MultipleChoice","WrittenChoice","QuizResults","QuizSideBar","jsxDEV","_jsxDEV","Fragment","_Fragment","QuizQuestions","_s","location","prevLocation","state","prevPath","quizCreator","creator","console","log","params","URLSearchParams","search","quizType","get","quizName","quizData","setQuizData","questions","term","definition","currentQuestionCount","setCurrentQuestionCount","quizQuestionsList","setQuizQuestionsList","allUserAns","setAllUserAns","submitted","setSubmitted","getRandomType","randomNum","Math","floor","random","createQuestionOrder","defs","questionOrder","i","length","push","shuffleArr","arr","numToSwap","temp","createMCChoices","answer","firstIdx","findIndex","x","defsCopy","filter","def","index","arrMC","randomDefIdx","splice","quizSetup","quizdata","qORder","entireQuiz","questionInfo","questionType","ans","choices","emptyAns","fetchQuizData","response","fetch","method","credentials","ok","Error","data","json","map","question","error","fetchQuizDataSearch","alldefinitions","handleNextQuestion","prevIndex","handlePreviousQuestion","className","children","fileName","_jsxFileName","lineNumber","columnNumber","currentQuestionIndex","userAnswer","_c","$RefreshReg$"],"sources":["C:/Users/Mohamed Barrie/Documents/Project/Student-Central/student-central/src/components/quiz-page/QuizQuestions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport '../../styles/quiz-page/QuizQuestions.css';\r\n// import \"../components/SavedQuizCard\"\r\n// import QuizSideBar from './QuizSidebar';\r\nimport MultipleChoice from './MultipleChoice'\r\nimport WrittenChoice from './WrittenChoice'\r\nimport QuizResults from './QuizResults'\r\nimport QuizSideBar from './QuizSidebar';\r\n\r\nconst QuizQuestions = () => {\r\n  const location = useLocation();\r\n  const prevLocation = location.state.prevPath;\r\n  const quizCreator = location.state.creator;\r\n  console.log(\"prevLocation\", location.state.prevPath);\r\n  console.log(\"creator\", location.state.creator);\r\n\r\n  //get query param\r\n  const params = new URLSearchParams(useLocation().search);\r\n  const quizType = params.get('type');\r\n  //get quiz name from param\r\n  const { quizName } = useParams();\r\n\r\n  const [quizData, setQuizData] = useState({\r\n    quizName: '',\r\n    questions: [\r\n      {\r\n        term: '',\r\n        definition: '',\r\n      },\r\n    ],\r\n  });\r\n  const [currentQuestionCount, setCurrentQuestionCount] = useState(0);\r\n  const [quizQuestionsList, setQuizQuestionsList] = useState([]);\r\n  const [allUserAns, setAllUserAns] = useState([]);\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  //helper function that returns a random type, either written or multiple choice\r\n  const getRandomType = () => {\r\n    //if quiz type was both, then we choose a type randomly\r\n    if (quizType == \"both\") {\r\n      let randomNum = Math.floor(Math.random() * 10) + 1;\r\n      if (randomNum % 2 == 0) { return \"multipleChoice\" }\r\n      else { return \"written\" }\r\n    }\r\n    else {\r\n      //if quiz type was not both, we use that quiz type for the question type\r\n      return quizType;\r\n    }\r\n  }\r\n\r\n  //helper function to shuffle the order of questions, so that each time user takes quiz, the order is different\r\n  const createQuestionOrder = (defs) => {\r\n    const questionOrder = [];\r\n    for (let i = 0; i < defs.length; i++) {\r\n      questionOrder.push(i);\r\n    }\r\n    shuffleArr(questionOrder);\r\n    return questionOrder;\r\n  }\r\n\r\n  //shuffles any array you give it\r\n  const shuffleArr = (arr) => {\r\n    //starting from the last element, choose an random element before it two swap with\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n      let numToSwap = Math.floor(Math.random() * (i + 1));\r\n      let temp = arr[i];\r\n      arr[i] = arr[numToSwap];\r\n      arr[numToSwap] = temp;\r\n    }\r\n  }\r\n\r\n  //given an answer and a list of all definitions within the quiz, create a 4 element array containing choices for a single question\r\n  const createMCChoices = (answer, defs) => {\r\n    //create a copy of the list of defintions, excluding the answer\r\n    const firstIdx = defs.findIndex(x => x === answer);\r\n    const defsCopy = defs.filter((def, index) => index != firstIdx);\r\n    //empty array to store choices\r\n    const arrMC = [];\r\n    //get a random number to decide where the answer will appear within the array of choices\r\n    let randomNum = Math.floor(Math.random() * 4);\r\n    //loop 4 times to fill up arrMC\r\n    for (let i = 0; i < 4; i++) {\r\n      //if this is not the index where the answer will be, randomly select a definition from the list of all definitions and place it in arrMC.\r\n      if (i != randomNum) {\r\n        let randomDefIdx = Math.floor(Math.random() * defsCopy.length);\r\n        arrMC.push(defsCopy[randomDefIdx]);\r\n        //remove chosen definition from the definitions array so it doesn't get chosen again\r\n        defsCopy.splice(randomDefIdx, 1);\r\n      }\r\n      else {\r\n        arrMC.push(answer);\r\n      }\r\n    }\r\n    return arrMC;\r\n  }\r\n\r\n  const quizSetup = (quizdata, defs) => {\r\n    //first get the question ordering\r\n    const qORder = createQuestionOrder(defs);\r\n    const entireQuiz = [];\r\n    for (let i = 0; i < qORder.length; i++) {\r\n      const questionInfo = {};\r\n      questionInfo.questionType = getRandomType();\r\n      questionInfo.term = quizdata.questions[qORder[i]].term;\r\n      const ans = quizdata.questions[qORder[i]].definition;\r\n      // console.log(\"questionType\", questionInfo.questionType);\r\n\r\n      //the object will only have choices if it is a multiple choice question\r\n      if (questionInfo.questionType === \"multipleChoice\") {\r\n        questionInfo.choices = createMCChoices(ans, defs);\r\n      }\r\n      questionInfo.answer = ans;\r\n\r\n      // console.log(\"questionInfo\", questionInfo);\r\n      entireQuiz.push(questionInfo);\r\n      // console.log(\"entireQuiz\", entireQuiz);\r\n\r\n    }\r\n    //update useState variable\r\n    setQuizQuestionsList(entireQuiz);\r\n\r\n    //this is used to track user answers. It starts with no user answer\r\n    const emptyAns = [];\r\n    for (let i = 0; i < entireQuiz.length; i++) {\r\n      emptyAns.push(\"\");\r\n    }\r\n    setAllUserAns(emptyAns);\r\n  }\r\n\r\n  //useEffect to get quiz data for quiz clicked on earlier\r\n  useEffect(() => {\r\n    const fetchQuizData = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:4000/api/quiz/get-one-quiz/${quizName}`, {\r\n          method: 'GET',\r\n          credentials: 'include',\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch quiz data.');\r\n        }\r\n        const data = await response.json();\r\n        const quizData = {\r\n          quizName: quizName,\r\n          // map out questions from database. Empty string is default\r\n          questions: data.questions.map((question) => ({\r\n            term: question.term || '',\r\n            definition: question.definition || '',\r\n          })),\r\n        };\r\n        // Update the state with the retrieved data\r\n        console.log(\"quizData\", quizData);\r\n\r\n        setQuizData(quizData);\r\n      } catch (error) {\r\n        console.log('Error fetching quiz data.', error);\r\n      }\r\n    };\r\n\r\n    const fetchQuizDataSearch = async (creator) => {\r\n      try {\r\n        const response = await fetch(`http://localhost:4000/api/quiz/one-quiz-from-all/${quizName}/${creator}`, {\r\n          method: 'GET',\r\n          credentials: 'include',\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch quiz data.');\r\n        }\r\n\r\n        const data = await response.json();\r\n        const quizData = {\r\n          quizName: quizName,\r\n          questions: data.map((question) => ({\r\n            term: question.term || '',\r\n            definition: question.definition || '',\r\n          })),\r\n        };\r\n        setQuizData(quizData);\r\n      } catch (error) {\r\n        console.log('Error fetching quiz data.', error);\r\n      }\r\n    };\r\n\r\n    if (!quizCreator) {\r\n      fetchQuizData();\r\n    }\r\n    else {\r\n      fetchQuizDataSearch(quizCreator);\r\n    }\r\n  }, [])\r\n\r\n  //once quiz data is fetched, we can organize that information to prepare for quiz taking\r\n  useEffect(() => {\r\n    const alldefinitions = quizData.questions.map((question) => question.definition);\r\n    console.log(\"alldefinitions\", alldefinitions);\r\n    quizSetup(quizData, alldefinitions);\r\n  }, [quizData])\r\n\r\n  //Save user answer and moves to next question\r\n  const handleNextQuestion = () => {\r\n    setCurrentQuestionCount((prevIndex) => prevIndex + 1);\r\n  };\r\n\r\n  //Save user answer and moves to previous question\r\n  const handlePreviousQuestion = () => {\r\n    setCurrentQuestionCount((prevIndex) => prevIndex - 1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"QuizQuestions-container\">\r\n      \r\n      {/* Buffer for our state variables to get their values before using them. Without this, we would have an error */}\r\n      {quizQuestionsList.length === 0 ? (\r\n        <div>Loading...</div>\r\n      ) : submitted ? (<QuizResults allUserAns={allUserAns} quizQuestionsList={quizQuestionsList} />) :\r\n        (\r\n          <>\r\n            <QuizSideBar allUserAns={allUserAns} setCurrentQuestionCount={setCurrentQuestionCount} currentQuestionCount={currentQuestionCount} />\r\n            {quizQuestionsList[currentQuestionCount].questionType === 'multipleChoice' ? (\r\n              <MultipleChoice\r\n                question={quizQuestionsList[currentQuestionCount]}\r\n                setAllUserAns={setAllUserAns}\r\n                allUserAns={allUserAns}\r\n                currentQuestionIndex={currentQuestionCount}\r\n                handleNextQuestion = {handleNextQuestion}\r\n                handlePreviousQuestion = {handlePreviousQuestion}\r\n                setSubmitted = {setSubmitted}\r\n                quizQuestionsList = {quizQuestionsList}\r\n                currentQuestionCount = {currentQuestionCount}\r\n              />\r\n            ) : (\r\n              <WrittenChoice\r\n                question={quizQuestionsList[currentQuestionCount]}\r\n                currentQuestionIndex={currentQuestionCount}\r\n                setAllUserAns={setAllUserAns}\r\n                allUserAns={allUserAns}\r\n                userAnswer={allUserAns[currentQuestionCount] || ''}\r\n                setCurrentQuestionCount={setCurrentQuestionCount}\r\n                handleNextQuestion = {handleNextQuestion}\r\n                handlePreviousQuestion = {handlePreviousQuestion}\r\n                setSubmitted = {setSubmitted}\r\n                quizQuestionsList = {quizQuestionsList}\r\n                currentQuestionCount = {currentQuestionCount}\r\n              />\r\n            )}\r\n          </>\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizQuestions;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}