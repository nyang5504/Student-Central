{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ninay\\\\Documents\\\\capstone-499\\\\Student-Central\\\\student-central\\\\src\\\\components\\\\quiz-page\\\\QuizQuestions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport '../../styles/quiz-page/QuizQuestions.css';\n// import \"../components/SavedQuizCard\"\n// import QuizSideBar from './QuizSidebar';\nimport MultipleChoice from './MultipleChoice';\nimport WrittenChoice from './WrittenChoice';\nimport QuizResults from './QuizResults';\nimport QuizSideBar from './QuizSidebar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QuizQuestions = () => {\n  _s();\n  //get query param\n  const params = new URLSearchParams(useLocation().search);\n  const quizType = params.get('type');\n  //get quiz name from param\n  const {\n    quizName\n  } = useParams();\n  const [quizData, setQuizData] = useState({\n    quizName: '',\n    questions: [{\n      term: '',\n      definition: ''\n    }]\n  });\n  const [currentQuestionCount, setCurrentQuestionCount] = useState(0);\n  const [quizQuestionsList, setQuizQuestionsList] = useState([]);\n  const [userAnswers, setUserAnswers] = useState({});\n  const [allUserAns, setAllUserAns] = useState([]);\n  const [submitted, setSubmitted] = useState(false);\n\n  // if(quizQuestionsList.length != 0){\n  //     console.log(\"quizQuestionsList\", quizQuestionsList[0]);\n  // }\n\n  //helper function that returns a random type, either written or multiple choice\n  const getRandomType = () => {\n    //if quiz type was both, then we choose a type randomly\n    if (quizType == \"both\") {\n      let randomNum = Math.floor(Math.random() * 10) + 1;\n      if (randomNum % 2 == 0) {\n        return \"multipleChoice\";\n      } else {\n        return \"written\";\n      }\n    } else {\n      //if quiz type was not both, we use that quiz type for the question type\n      return quizType;\n    }\n  };\n  const createQuestionOrder = defs => {\n    const questionOrder = [];\n    for (let i = 0; i < defs.length; i++) {\n      questionOrder.push(i);\n    }\n    shuffleArr(questionOrder);\n    // questionOrder.shuffle();\n    return questionOrder;\n  };\n  const createMCChoices = (answer, defs) => {\n    let randomNum = Math.floor(Math.random() * 4);\n    const firstIdx = defs.findIndex(x => x === answer);\n    const defsCopy = defs.filter((def, index) => index != firstIdx);\n    const arrMC = [];\n    for (let i = 0; i < 4; i++) {\n      if (i != randomNum) {\n        let randomDefIdx = Math.floor(Math.random() * defsCopy.length);\n        arrMC.push(defsCopy[randomDefIdx]);\n        defsCopy.splice(randomDefIdx, 1);\n      } else {\n        arrMC.push(answer);\n      }\n    }\n    return arrMC;\n  };\n  const quizSetup = (quizdata, defs) => {\n    const qORder = createQuestionOrder(defs);\n    const entireQuiz = [];\n    for (let i = 0; i < qORder.length; i++) {\n      const questionInfo = {};\n      //set type\n      questionInfo.questionType = getRandomType();\n      questionInfo.term = quizdata.questions[qORder[i]].term;\n      const ans = quizdata.questions[qORder[i]].definition;\n      console.log(\"questionType\", questionInfo.questionType);\n      if (questionInfo.questionType === \"multipleChoice\") {\n        questionInfo.choices = createMCChoices(ans, defs);\n      }\n      questionInfo.answer = ans;\n      console.log(\"questionInfo\", questionInfo);\n      entireQuiz.push(questionInfo);\n      console.log(\"entireQuiz\", entireQuiz);\n    }\n    setQuizQuestionsList(entireQuiz);\n    const emptyAns = [];\n    for (let i = 0; i < entireQuiz.length; i++) {\n      emptyAns.push(\"\");\n    }\n    setAllUserAns(emptyAns);\n  };\n  const shuffleArr = arr => {\n    for (let i = arr.length - 1; i > 0; i--) {\n      let numToSwap = Math.floor(Math.random() * (i + 1));\n      let temp = arr[i];\n      arr[i] = arr[numToSwap];\n      arr[numToSwap] = temp;\n    }\n  };\n\n  //useEffect to get quiz data for quiz clicked on earlier\n  useEffect(() => {\n    const fetchQuizData = async () => {\n      try {\n        const response = await fetch(`http://localhost:4000/api/quiz/get-one-quiz/${quizName}`, {\n          method: 'GET',\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch quiz data.');\n        }\n        const data = await response.json();\n        const quizData = {\n          quizName: quizName,\n          // map out questions from database. Empty string is default\n          questions: data.map(question => ({\n            term: question.term || '',\n            definition: question.definition || ''\n          }))\n        };\n        // Update the state with the retrieved data\n        console.log(\"quizData\", quizData);\n        setQuizData(quizData);\n      } catch (error) {\n        console.log('Error fetching quiz data.', error);\n      }\n    };\n    fetchQuizData();\n  }, []);\n\n  //once quiz data is fetched, we can organize that information to prepare for quiz taking\n  useEffect(() => {\n    const alldefinitions = quizData.questions.map(question => question.definition);\n    console.log(\"alldefinitions\", alldefinitions);\n    quizSetup(quizData, alldefinitions);\n  }, [quizData]);\n  const handleAnswerChange = answer => {\n    setUserAnswers(prevAnswers => ({\n      ...prevAnswers,\n      [currentQuestionCount]: answer\n    }));\n  };\n\n  //Save user answer(doesnt work yet) and moves to next question\n  const handleNextQuestion = () => {\n    handleAnswerChange(currentQuestionCount, userAnswers);\n    setCurrentQuestionCount(prevIndex => prevIndex + 1);\n  };\n\n  //Save user answer(doesnt work yet) and moves to previous question\n  const handlePreviousQuestion = () => {\n    handleAnswerChange(currentQuestionCount, userAnswers);\n    setCurrentQuestionCount(prevIndex => prevIndex - 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"QuizQuestions-container\",\n    children: quizQuestionsList.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this) : submitted ? /*#__PURE__*/_jsxDEV(QuizResults, {\n      allUserAns: allUserAns,\n      quizQuestionsList: quizQuestionsList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Quiz: \", quizData.quizName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(QuizSideBar, {\n        allUserAns: allUserAns,\n        setCurrentQuestionCount: setCurrentQuestionCount,\n        currentQuestionCount: currentQuestionCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }, this), quizQuestionsList[currentQuestionCount].questionType === 'multipleChoice' ? /*#__PURE__*/_jsxDEV(MultipleChoice, {\n        question: quizQuestionsList[currentQuestionCount],\n        onAnswerChange: handleAnswerChange,\n        setAllUserAns: setAllUserAns,\n        allUserAns: allUserAns,\n        currentQuestionIndex: currentQuestionCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(WrittenChoice, {\n        question: quizQuestionsList[currentQuestionCount],\n        currentQuestionIndex: currentQuestionCount,\n        onAnswerChange: handleAnswerChange,\n        setAllUserAns: setAllUserAns,\n        allUserAns: allUserAns,\n        userAnswer: allUserAns[currentQuestionCount] || '',\n        setCurrentQuestionCount: setCurrentQuestionCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-navigation\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePreviousQuestion,\n          disabled: currentQuestionCount === 0,\n          children: \"Previous Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 15\n        }, this), currentQuestionCount === quizQuestionsList.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSubmitted(true),\n          children: \"Submit Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextQuestion,\n          children: \"Next Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizQuestions, \"70P2bLy6os2uW5ySUe3uqWIKtDM=\", false, function () {\n  return [useLocation, useParams];\n});\n_c = QuizQuestions;\nexport default QuizQuestions;\nvar _c;\n$RefreshReg$(_c, \"QuizQuestions\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useParams","MultipleChoice","WrittenChoice","QuizResults","QuizSideBar","jsxDEV","_jsxDEV","Fragment","_Fragment","QuizQuestions","_s","params","URLSearchParams","search","quizType","get","quizName","quizData","setQuizData","questions","term","definition","currentQuestionCount","setCurrentQuestionCount","quizQuestionsList","setQuizQuestionsList","userAnswers","setUserAnswers","allUserAns","setAllUserAns","submitted","setSubmitted","getRandomType","randomNum","Math","floor","random","createQuestionOrder","defs","questionOrder","i","length","push","shuffleArr","createMCChoices","answer","firstIdx","findIndex","x","defsCopy","filter","def","index","arrMC","randomDefIdx","splice","quizSetup","quizdata","qORder","entireQuiz","questionInfo","questionType","ans","console","log","choices","emptyAns","arr","numToSwap","temp","fetchQuizData","response","fetch","method","credentials","ok","Error","data","json","map","question","error","alldefinitions","handleAnswerChange","prevAnswers","handleNextQuestion","prevIndex","handlePreviousQuestion","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onAnswerChange","currentQuestionIndex","userAnswer","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ninay/Documents/capstone-499/Student-Central/student-central/src/components/quiz-page/QuizQuestions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport '../../styles/quiz-page/QuizQuestions.css';\r\n// import \"../components/SavedQuizCard\"\r\n// import QuizSideBar from './QuizSidebar';\r\nimport MultipleChoice from './MultipleChoice'\r\nimport WrittenChoice from './WrittenChoice'\r\nimport QuizResults from './QuizResults'\r\nimport QuizSideBar from './QuizSidebar';\r\n\r\nconst QuizQuestions = () => {\r\n\r\n  //get query param\r\n  const params = new URLSearchParams(useLocation().search);\r\n  const quizType = params.get('type');\r\n  //get quiz name from param\r\n  const { quizName } = useParams();\r\n  \r\n  const [quizData, setQuizData] = useState({\r\n    quizName: '',\r\n    questions: [\r\n      {\r\n        term: '',\r\n        definition: '',\r\n      },\r\n    ],\r\n  });\r\n  const [currentQuestionCount, setCurrentQuestionCount] = useState(0);\r\n\r\n  const [quizQuestionsList, setQuizQuestionsList] = useState([]);\r\n  const [userAnswers, setUserAnswers] = useState({});\r\n  const [allUserAns, setAllUserAns] = useState([]);\r\n\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  // if(quizQuestionsList.length != 0){\r\n  //     console.log(\"quizQuestionsList\", quizQuestionsList[0]);\r\n  // }\r\n\r\n  //helper function that returns a random type, either written or multiple choice\r\n  const getRandomType = () => {\r\n    //if quiz type was both, then we choose a type randomly\r\n    if (quizType == \"both\") {\r\n      let randomNum = Math.floor(Math.random() * 10) + 1;\r\n      if (randomNum % 2 == 0) { return \"multipleChoice\" }\r\n      else { return \"written\" }\r\n    }\r\n    else {\r\n      //if quiz type was not both, we use that quiz type for the question type\r\n      return quizType;\r\n    }\r\n  }\r\n\r\n  const createQuestionOrder = (defs) => {\r\n    const questionOrder = [];\r\n    for (let i = 0; i < defs.length; i++) {\r\n      questionOrder.push(i);\r\n    }\r\n    shuffleArr(questionOrder);\r\n    // questionOrder.shuffle();\r\n    return questionOrder;\r\n  }\r\n\r\n  const createMCChoices = (answer, defs) => {\r\n    let randomNum = Math.floor(Math.random() * 4);\r\n    const firstIdx = defs.findIndex(x => x === answer);\r\n    const defsCopy = defs.filter((def, index) => index != firstIdx);\r\n    const arrMC = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      if (i != randomNum) {\r\n        let randomDefIdx = Math.floor(Math.random() * defsCopy.length);\r\n        arrMC.push(defsCopy[randomDefIdx]);\r\n        defsCopy.splice(randomDefIdx, 1);\r\n      }\r\n      else {\r\n        arrMC.push(answer);\r\n      }\r\n    }\r\n    return arrMC;\r\n  }\r\n\r\n  const quizSetup = (quizdata, defs) => {\r\n    const qORder = createQuestionOrder(defs);\r\n    const entireQuiz = [];\r\n    for (let i = 0; i < qORder.length; i++) {\r\n      const questionInfo = {};\r\n      //set type\r\n      questionInfo.questionType = getRandomType();\r\n      questionInfo.term = quizdata.questions[qORder[i]].term;\r\n      const ans = quizdata.questions[qORder[i]].definition;\r\n      console.log(\"questionType\", questionInfo.questionType);\r\n      if (questionInfo.questionType === \"multipleChoice\") {\r\n        questionInfo.choices = createMCChoices(ans, defs);\r\n      }\r\n      questionInfo.answer = ans;\r\n\r\n      console.log(\"questionInfo\", questionInfo);\r\n      entireQuiz.push(questionInfo);\r\n      console.log(\"entireQuiz\", entireQuiz);\r\n\r\n    }\r\n    setQuizQuestionsList(entireQuiz);\r\n\r\n    const emptyAns = [];\r\n    for (let i = 0; i < entireQuiz.length; i++) {\r\n      emptyAns.push(\"\");\r\n    }\r\n    setAllUserAns(emptyAns);\r\n  }\r\n\r\n  const shuffleArr = (arr) => {\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n      let numToSwap = Math.floor(Math.random() * (i + 1));\r\n      let temp = arr[i];\r\n      arr[i] = arr[numToSwap];\r\n      arr[numToSwap] = temp;\r\n    }\r\n  }\r\n\r\n  //useEffect to get quiz data for quiz clicked on earlier\r\n  useEffect(() => {\r\n    const fetchQuizData = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:4000/api/quiz/get-one-quiz/${quizName}`, {\r\n          method: 'GET',\r\n          credentials: 'include',\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch quiz data.');\r\n        }\r\n        const data = await response.json();\r\n        const quizData = {\r\n          quizName: quizName,\r\n          // map out questions from database. Empty string is default\r\n          questions: data.map((question) => ({\r\n            term: question.term || '',\r\n            definition: question.definition || '',\r\n          })),\r\n        };\r\n        // Update the state with the retrieved data\r\n        console.log(\"quizData\", quizData);\r\n\r\n        setQuizData(quizData);\r\n      } catch (error) {\r\n        console.log('Error fetching quiz data.', error);\r\n      }\r\n    };\r\n    fetchQuizData();\r\n  }, [])\r\n\r\n  //once quiz data is fetched, we can organize that information to prepare for quiz taking\r\n  useEffect(() => {\r\n    const alldefinitions = quizData.questions.map((question) => question.definition);\r\n    console.log(\"alldefinitions\", alldefinitions);\r\n    quizSetup(quizData, alldefinitions);\r\n  }, [quizData])\r\n\r\n  const handleAnswerChange = (answer) => {\r\n    setUserAnswers((prevAnswers) => ({\r\n      ...prevAnswers,\r\n      [currentQuestionCount]: answer,\r\n    }));\r\n  };\r\n\r\n  //Save user answer(doesnt work yet) and moves to next question\r\n  const handleNextQuestion = () => {\r\n    handleAnswerChange(currentQuestionCount, userAnswers);\r\n    setCurrentQuestionCount((prevIndex) => prevIndex + 1);\r\n  };\r\n\r\n  //Save user answer(doesnt work yet) and moves to previous question\r\n  const handlePreviousQuestion = () => {\r\n    handleAnswerChange(currentQuestionCount, userAnswers);\r\n    setCurrentQuestionCount((prevIndex) => prevIndex - 1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"QuizQuestions-container\">\r\n      {quizQuestionsList.length === 0 ? (\r\n        <div>Loading...</div>\r\n      ) : submitted ? (<QuizResults allUserAns={allUserAns} quizQuestionsList={quizQuestionsList} />) :\r\n        (\r\n          <>\r\n            <h2>Quiz: {quizData.quizName}</h2>\r\n            <QuizSideBar allUserAns={allUserAns} setCurrentQuestionCount={setCurrentQuestionCount} currentQuestionCount={currentQuestionCount} />\r\n            {quizQuestionsList[currentQuestionCount].questionType === 'multipleChoice' ? (\r\n              <MultipleChoice\r\n                question={quizQuestionsList[currentQuestionCount]}\r\n                onAnswerChange={handleAnswerChange}\r\n                setAllUserAns={setAllUserAns}\r\n                allUserAns={allUserAns}\r\n                currentQuestionIndex={currentQuestionCount}\r\n              />\r\n            ) : (\r\n              <WrittenChoice\r\n                question={quizQuestionsList[currentQuestionCount]}\r\n                currentQuestionIndex={currentQuestionCount}\r\n                onAnswerChange={handleAnswerChange}\r\n                setAllUserAns={setAllUserAns}\r\n                allUserAns={allUserAns}\r\n                userAnswer={allUserAns[currentQuestionCount] || ''}\r\n                setCurrentQuestionCount={setCurrentQuestionCount}\r\n              />\r\n            )}\r\n\r\n            <div className=\"question-navigation\">\r\n              <button onClick={handlePreviousQuestion} disabled={currentQuestionCount === 0}>\r\n                Previous Question\r\n              </button>\r\n              {currentQuestionCount === quizQuestionsList.length - 1 ? (\r\n                <button onClick={() => setSubmitted(true)}>Submit Quiz</button>\r\n              ) : (\r\n                <button onClick={handleNextQuestion}>Next Question</button>\r\n              )}\r\n            </div>\r\n          </>\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizQuestions;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}